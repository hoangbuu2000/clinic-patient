{"version":3,"sources":["logo.svg","components/ScrollTopTop.js","API.js","components/Button.js","components/DataTable.js","URL.js","components/Login.js","components/Register.js","components/Paypal.js","components/Chat.js","pages/index.js","App.js","reportWebVitals.js","index.js"],"names":["ScrollToTop","props","handleScrollToTop","style","position","bottom","right","cursor","width","onClick","src","alt","endpoints","axios","create","baseURL","ButtonCustom","bgColor","color","red","lightBlue","styles","background","Object","assign","Button","id","type","variant","title","useStyles","makeStyles","theme","typoContainer","padding","margin","typo","borderRadius","textAlign","fontSize","root","backgroundColor","DataTable","classes","className","header","Typography","getRowClassName","params","getValue","rows","columns","pageSize","checkboxSelection","disableSelectionOnClick","paginationMode","server","onCellEditCommit","handleCellEditCommit","rowCount","onPageChange","handlePageChange","page","currentPage","autoHeight","selectionModel","onSelectionModelChange","handleSelectionChange","isRowSelectable","btnTitle","createURL","to","textDecoration","url","Transition","React","forwardRef","ref","Slide","direction","form","btn","minWidth","Login","isDialogShow","handleClose","useState","username","password","user","setUser","currentUserContext","useContext","CurrentUserContext","handleChange","event","temp","target","name","value","Dialog","zIndex","open","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","onSubmit","preventDefault","promises","push","API","method","data","then","res","status","localStorage","setItem","accessToken","catch","err","response","swal","Promise","all","get","headers","getItem","console","log","setCurrentUser","setLoginShow","clear","DialogTitle","DialogContent","DialogContentText","Grid","container","spacing","item","xs","marginTop","label","validators","errorMessages","onChange","paddingTop","marginLeft","href","startIcon","marginRight","button","instructions","marginBottom","actions","Register","confirmPassword","fileImg","account","setAccount","fullName","gender","phone","email","address","info","setInfo","image","setImage","Date","selectedDOB","setSelectedDOB","activeStep","setActiveStep","Set","skipped","setSkipped","steps","isFormValid","setFormValid","isInfoValid","setInfoValid","isStepOptional","step","isStepSkipped","has","handleNext","newSkipped","values","delete","prevActiveStep","myForm","FormData","append","accountId","lastName","split","slice","join","firstName","dateOfBirth","handleChangeAccount","useEffect","ValidatorForm","addValidationRule","RegExp","test","toString","document","getElementsByName","length","removeValidationRule","every","i","Stepper","alternativeLabel","map","index","stepProps","completed","Step","StepLabel","process","height","border","display","png","toLowerCase","endsWith","jpg","jpeg","svg","file","getElementById","files","URL","createObjectURL","top","left","utils","DateFnsUtils","format","date","DialogActions","setRegisterShow","disabled","Error","prevSkipped","add","Paypal","paypal","useRef","service","handleSubmit","currentUser","doctor","shift","booking","window","Buttons","createOrder","order","intent","purchase_units","description","amount","current_code","price","onApprove","a","capture","onError","render","current","sender","fontWeight","receiver","Chat","isOpen","setOpen","messages","setMessages","message","setMessage","uid","displayName","photoURL","db","getFirestore","q","query","collection","where","documentId","onSnapshot","snapShot","arr","docs","forEach","doc","element","messageId","setTimeout","overflow","m","time","setUTCSeconds","seconds","Tooltip","Avatar","content","e","getDocs","docRef","setDoc","merge","Timestamp","now","TextField","placeholder","IconButton","monthNames","createContext","LandingPage","setBooking","selectedDate","setSelectedDate","services","setServices","switchNav","setSwitchNav","isShow","setShow","accounts","setAccounts","doctors","setDoctors","shifts","setShifts","doctorSelected","setDoctorSelected","shiftSelected","setShiftSelected","setDialogShow","isDoctorShow","setDoctorShow","isShiftShow","setShiftShow","infoD","setInfoD","infoS","setInfoS","history","useHistory","isLoginShow","isRegisterShow","formRef","isProfileShow","setProfileShow","valueTab","setValueTab","birthday","isUpdating","setUpdating","isVaccineShow","setVaccineShow","isCovidTestShow","setCovidTestShow","isHealthRecordsShow","setHealthRecordsShow","prescriptionsWithVaccine","setPrescriptionsWithVaccine","prescriptionsWithCovidTest","setPrescriptionsWithCovidTest","prescriptions","setPrescriptions","setCurrentPage","setTotalElements","totalPages","setTotalPages","prescriptionDetails","setPrescriptionDetails","medicines","setMedicines","isPrescriptionDetailsShow","setPrescriptionDetailsShow","doctorOfPrescription","setDoctorOfPrescription","isCovidTestDetailsShow","setCovidTestDetailsShow","prescriptionWithCovidTest","setPrescriptionWithCovidTest","backgroundImage","backgroundSize","backgroundRepeat","backgroundPositionX","menu_container","justifyContent","listStyleType","btnGroup","selected","nav","avatar","minHeight","editIcon","fill","columnsDoctor","field","hide","headerName","renderCell","account_id","filter","valueGetter","toggleShow","pageYOffset","handleChooseDoctor","sh","doctor_id","doctorIds","promise","doctorArr","accountIds","d","accountArr","handleChooseShift","shift_id","shiftIds","shiftArr","isMaxArr","isMax","getCurrentUser","dob","getHealthRecords","userId","totalElements","number","pres","p","medicine_id","medicineIds","medicineArr","addEventListener","firebase","apps","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","AOS","init","duration","Provider","noWrap","align","param","database","getDatabase","notiListRef","newNotiRef","set","array","onValue","snapshot","childSnapshot","childData","val","Array","isArray","confirm","paddingLeft","s","paid","input","minDate","arrow","MenuItem","fullScreen","edge","aria-label","row","data-aos","scrollTo","behavior","Tabs","orientation","indicatorColor","textColor","newValue","Tab","TableContainer","component","Paper","Table","TableBody","TableRow","TableCell","EditAttributes","getDate","getMonth","getFullYear","PaperProps","textTransform","size","level","includeMargin","paddingBottom","getPrescriptionDetails","Pagination","count","shape","showFirstButton","showLastButton","newPage","TableHead","pd","prescription","prescription_id","serviceName","serviceFee","arial-label","medicine","quantity","unitPrice","unit","totalPrice","colSpan","reduce","b","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.71a4457c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useEffect, useState } from \"react\";\r\n\r\nexport default function ScrollToTop(props) {\r\n    const handleScrollToTop = props.handleScrollToTop;\r\n\r\n    return (\r\n        <div style={{position: 'fixed', bottom: 15, right: 15, cursor: 'pointer', width: 50}} \r\n        onClick={handleScrollToTop}>\r\n            <img width=\"100%\" src='https://gotravel.vn/tour-du-lich-he-gia-re/assets/img/back-to-top.png' alt=\"Go to top\" />\r\n        </div>\r\n    )\r\n}","import axios from 'axios';\r\n\r\nexport let endpoints = {\r\n    'roles': 'roles',\r\n    'accounts': 'accounts',\r\n    'medicines': 'medicines',\r\n    'shifts': 'shifts',\r\n    'admins': 'admins',\r\n    'doctors': 'doctors',\r\n    'employees': 'employees',\r\n    'schedules': 'schedules',\r\n    'bookings': 'bookings',\r\n    'patients': 'patients',\r\n    'prescriptions': 'prescriptions',\r\n    'invoices': 'invoices',\r\n    'services': 'services'\r\n}\r\n\r\nexport default axios.create({\r\n    baseURL: 'http://localhost:8080/'\r\n})","import { Button } from \"@material-ui/core\"\r\nimport { lightBlue, red } from '@material-ui/core/colors';\r\n\r\nexport default function ButtonCustom(props) {\r\n    let bgColor;\r\n    let color;\r\n    if (props.color === 'primary') {\r\n        bgColor = '#e1f5fe';\r\n        color = 'black';\r\n    }\r\n    else if (props.color === 'secondary') {\r\n        bgColor = red['A400'];\r\n        color = 'white';\r\n    } \r\n    else if (props.color === 'lightPrimary') {\r\n        bgColor = '#ffffff';\r\n        color = '#000000';\r\n    }\r\n    else if (props.color === 'darkPrimary') {\r\n        bgColor = '#afc2cb';\r\n        color = '#000000';\r\n    }\r\n    else if (props.color === 'darkSecondary') {\r\n        bgColor = '#cbcbcb';\r\n        color = '#000000';\r\n    }\r\n    else if (props.color === 'white') {\r\n        bgColor = 'white';\r\n        color = lightBlue['A400'];\r\n    }\r\n\r\n    let styles = {\r\n        color: color,\r\n        background: bgColor\r\n    }\r\n    Object.assign(styles, props.style)\r\n\r\n    return (\r\n        <Button id={props.id} onClick={props.onClick} type={props.type} \r\n        variant={props.variant ? props.variant : \"contained\"} style={styles}>\r\n            {props.title}\r\n        </Button>\r\n    )\r\n}","import { makeStyles, Typography } from \"@material-ui/core\"\r\nimport ButtonCustom from \"./Button\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    typoContainer: {\r\n        padding: 30,\r\n        width: '30%',\r\n        margin: '0 auto'\r\n    },\r\n    typo: {\r\n        borderRadius: 6,\r\n        textAlign: 'center',\r\n        background: '#e1f5fe',\r\n        fontSize: 24,\r\n        padding: 5,\r\n        color: '#000000'\r\n    },\r\n    root: {\r\n        '& .super-app-theme--Max': {\r\n            backgroundColor: '#ef9a9a',\r\n            '&:hover': {\r\n                backgroundColor: '#ffcdd2'\r\n            }\r\n        }\r\n    }\r\n}))\r\n\r\nexport default function DataTable(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {props.header ? (\r\n                <div className={classes.typoContainer}>\r\n                <Typography className={classes.typo} variant=\"h4\">{props.header}</Typography>\r\n                </div>\r\n            ) : ''}\r\n            <DataGrid\r\n            getRowClassName={(params) => params.getValue(params.id, 'isMax') === true ? `super-app-theme--Max` : ''}\r\n            className={props.className}\r\n            rows={props.rows}\r\n            columns={props.columns}\r\n            pageSize={props.pageSize}\r\n            checkboxSelection={!props.checkboxSelection ? props.checkboxSelection : true}\r\n            disableSelectionOnClick={!props.disableSelectionOnClick ? props.disableSelectionOnClick : true }\r\n            paginationMode={props.server ? 'server' : 'client'}\r\n            onCellEditCommit={props.handleCellEditCommit}\r\n            rowCount={props.rowCount}\r\n            onPageChange={props.handlePageChange}\r\n            page={props.currentPage}\r\n            autoHeight={true}\r\n            selectionModel={props.selectionModel}\r\n            onSelectionModelChange={props.handleSelectionChange}\r\n            checkboxSelection={props.checkboxSelection ? true : false}\r\n            isRowSelectable={props.isRowSelectable}\r\n            />\r\n            <br/>\r\n            {props.btnTitle !== \"\" && props.createURL !== \"\" ? (\r\n                <Link to={props.createURL} style={{textDecoration: 'none'}}>\r\n                    <ButtonCustom title={props.btnTitle} color=\"primary\" />\r\n                </Link>\r\n            ) : \"\"}\r\n        </div>\r\n    )\r\n}","export let url = {\r\n    'login': '/login'\r\n}","import { Button, Dialog, DialogContent, DialogContentText, DialogTitle, makeStyles, Slide,\r\n    Typography } from \"@material-ui/core\";\r\nimport React, { useState, useContext } from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { TextValidator, ValidatorForm } from \"react-material-ui-form-validator\";\r\nimport { mergeClasses } from \"@material-ui/styles\";\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport YouTubeIcon from '@material-ui/icons/YouTube';\r\nimport API from \"../API\";\r\nimport { CurrentUserContext } from \"../pages\";\r\nimport swal from \"sweetalert\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n    form: {\r\n        textAlign: 'center'\r\n    },\r\n    btn: {\r\n        minWidth: 195,\r\n        borderRadius: 30\r\n    }\r\n})\r\n\r\nexport default function Login(props) {\r\n    const isDialogShow = props.isDialogShow;\r\n    const handleClose = props.handleClose;\r\n    const [user, setUser] = useState({\r\n        username: '',\r\n        password: ''\r\n    });\r\n    const classes = useStyles();\r\n    const currentUserContext = useContext(CurrentUserContext);\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        let promises = [];\r\n        promises.push(\r\n            API(`/auth/signIn`, {\r\n                method: 'post',\r\n                data: user\r\n            }).then(res => {\r\n                if (res.status === 200) {\r\n                    localStorage.setItem('token', res.data.accessToken);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                if (err.response?.status === 401) {\r\n                    swal('Invalid username or password', '', 'error');\r\n                    return ;\r\n                }\r\n            })\r\n        )\r\n\r\n        Promise.all(promises).then(() => {\r\n            API.get(`/auth/user`, {\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                }\r\n            }).then(res => {\r\n                console.log(res);\r\n                if (res.status === 200) {\r\n                    currentUserContext.setCurrentUser(res.data);\r\n                    currentUserContext.setLoginShow(false);\r\n                }\r\n            }).catch(err => {\r\n                console.log(err.response)\r\n                if (err.response?.status === 403) {\r\n                    swal(`Your role was forbidden`, '', 'error');\r\n                    localStorage.clear();\r\n                    return;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        let temp = {...user};\r\n        temp[event.target.name] = event.target.value;\r\n        setUser(temp);\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            style={{ zIndex: 1000 }}\r\n            open={isDialogShow}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-slide-title\"\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n            <ValidatorForm onSubmit={handleSubmit} className={classes.form}>\r\n                <DialogTitle id=\"alert-dialog-slide-title\">\r\n                    LOGIN\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description\">\r\n                        <Grid container spacing={4}>\r\n                            <Grid item xs={12} style={{ marginTop: 5 }}>\r\n                                <TextValidator name=\"username\" label=\"Username *\"\r\n                                validators={['required']}\r\n                                errorMessages={['this field is required']}\r\n                                value={user.username} onChange={handleChange} />\r\n                            </Grid>\r\n                            <Grid item xs={12} style={{ marginTop: 5 }}>\r\n                                <TextValidator name=\"password\" label=\"Password *\"\r\n                                validators={['required']} type=\"password\"\r\n                                errorMessages={['this field is required']}\r\n                                value={user.password} onChange={handleChange} />\r\n                            </Grid>\r\n                            <Grid item xs={12} style={{ paddingTop: 0, marginLeft: 95 }}>\r\n                                <a href=\"#\" style={{color: 'blue', textDecoration: 'none'}}>\r\n                                    <Typography variant=\"caption\">Forgot password</Typography>\r\n                                    </a>\r\n                            </Grid>\r\n                            <Grid item xs={12} style={{ marginTop: 5 }}>\r\n                                <Button color=\"primary\" variant=\"contained\" className={classes.btn} type=\"submit\">Login</Button>\r\n                            </Grid>\r\n                            <Grid item xs={12} style={{ marginTop: 20 }}>\r\n                                Or    \r\n                            </Grid>\r\n                            <Grid item xs={12} style={{marginTop: 10}}>\r\n                                <Button color=\"primary\" startIcon={<FacebookIcon />} variant=\"outlined\"\r\n                                className={classes.btn}>\r\n                                    Facebook\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={12} style={{marginTop: -20}}>\r\n                                <Button color=\"secondary\" startIcon={<TwitterIcon />} variant=\"outlined\"\r\n                                className={classes.btn}>\r\n                                    Twitter\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={12} style={{marginTop: -20}}>\r\n                                <Button startIcon={<YouTubeIcon />} variant=\"outlined\"\r\n                                className={classes.btn}>\r\n                                    Youtube\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n            </ValidatorForm>\r\n        </Dialog>\r\n    )\r\n}","import { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, makeStyles, Slide, Step, StepLabel, Stepper, Typography } from \"@material-ui/core\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport YouTubeIcon from '@material-ui/icons/YouTube';\r\nimport { TextValidator, ValidatorForm } from \"react-material-ui-form-validator\";\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport PhotoCameraIcon from '@material-ui/icons/PhotoCamera';\r\nimport swal from \"sweetalert\";\r\nimport { CurrentUserContext } from \"../pages\";\r\nimport API, { endpoints } from \"../API\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    form: {\r\n        textAlign: 'center'\r\n    },\r\n    btn: {\r\n        minWidth: 50,\r\n        marginRight: 5\r\n    },\r\n    button: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    instructions: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    actions: {\r\n        marginTop: 30\r\n    }\r\n}))\r\n\r\nexport default function Register(props) {\r\n    const isDialogShow = props.isDialogShow;\r\n    const handleClose = props.handleClose;\r\n    const classes = useStyles();\r\n    const [account, setAccount] = useState({\r\n        username: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        fileImg: null\r\n    })\r\n    const [info, setInfo] = useState({\r\n        fullName: '',\r\n        gender: '',\r\n        phone: '',\r\n        email: '',\r\n        address: '',\r\n    })\r\n    const [image, setImage] = useState();\r\n    const [selectedDOB, setSelectedDOB] = useState(new Date());\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const [skipped, setSkipped] = useState(new Set());\r\n    const steps = ['username & password', 'information', 'completed'];\r\n    const [isFormValid, setFormValid] = useState(false);\r\n    const [isInfoValid, setInfoValid] = useState(false);\r\n    const currentUserContext = useContext(CurrentUserContext);\r\n\r\n    const isStepOptional = (step) => {\r\n        return step === 1;\r\n    }\r\n\r\n    const isStepSkipped = (step) => {\r\n        return skipped.has(step);\r\n    }\r\n\r\n    const handleNext = () => {\r\n        let newSkipped = skipped;\r\n        if (isStepSkipped(activeStep)) {\r\n            newSkipped = new Set(newSkipped.values());\r\n            newSkipped.delete(activeStep);\r\n        }\r\n\r\n        setActiveStep((prevActiveStep) => {\r\n            const step = prevActiveStep + 1;\r\n\r\n            if (step === 2) {\r\n                let myForm = new FormData();\r\n                myForm.append('username', account.username);\r\n                myForm.append('password', account.password);\r\n                if (account.fileImg)\r\n                    myForm.append('file', account.fileImg);\r\n\r\n                API(`${endpoints['roles']}/1/accounts`, {\r\n                    method: 'post',\r\n                    headers: {\r\n                        'Authorization': 'Bearer ' + localStorage.getItem('token'),\r\n                        'Content-type': 'multipart/form-data'\r\n                    },\r\n                    data: myForm\r\n                }).then(res => {\r\n                    if (res.status === 201) {\r\n                        const accountId = res.data.id;\r\n                        let fullName = info.fullName;\r\n                        let lastName = fullName.split(' ').slice(0, -1).join(' ');\r\n                        let firstName = fullName.split(' ').slice(-1).join(' ');\r\n                        const data = {\r\n                            firstName: firstName,\r\n                            lastName: lastName,\r\n                            gender: info.gender,\r\n                            dateOfBirth: selectedDOB,\r\n                            email: info.email,\r\n                            phone: info.phone,\r\n                            address: info.address\r\n                        };\r\n                        API(`${endpoints['accounts']}/${accountId}/patients`, {\r\n                            method: 'post',\r\n                            headers: {\r\n                                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                            },\r\n                            data: data\r\n                        }).then(res => console.log(res))\r\n                            .catch(err => console.log(err))\r\n                    }\r\n                }).catch(err => console.log(err.response))\r\n            }\r\n\r\n            return step;\r\n        });\r\n        setSkipped(newSkipped);\r\n    }\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    }\r\n\r\n    const handleSkip = () => {\r\n        if (!isStepOptional(activeStep)) {\r\n            throw new Error(\"You can't skip a step that isn't optional.\");\r\n        }\r\n\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        setSkipped((prevSkipped) => {\r\n            const newSkipped = new Set(prevSkipped.values());\r\n            newSkipped.add(activeStep);\r\n            return newSkipped;\r\n        })\r\n\r\n        let myForm = new FormData();\r\n        myForm.append('username', account.username);\r\n        myForm.append('password', account.password);\r\n        if (account.fileImg)\r\n            myForm.append('file', account.fileImg);\r\n        API(`${endpoints['roles']}/1/accounts`, {\r\n            method: 'post',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token'),\r\n                'Content-type': 'multipart/form-data'\r\n            },\r\n            data: myForm\r\n        }).then(res => console.log(res))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    function handleChange(event) {\r\n        let temp = { ...info };\r\n        temp[event.target.name] = event.target.value;\r\n        setInfo(temp);\r\n    }\r\n\r\n    function handleChangeAccount(event) {\r\n        let temp = { ...account };\r\n        temp[event.target.name] = event.target.value;\r\n        setAccount(temp);\r\n    }\r\n\r\n    function handleSubmit() { }\r\n\r\n    function handleRegister() {\r\n        currentUserContext.setRegisterShow(false);\r\n        setActiveStep(0);\r\n        setAccount({});\r\n        setInfo({});\r\n        setFormValid(false);\r\n        setInfoValid(false);\r\n    }\r\n\r\n    function handleFileChange(event) {\r\n        let png = event.target.value.toLowerCase().endsWith('.png');\r\n        let jpg = event.target.value.toLowerCase().endsWith('.jpg');\r\n        let jpeg = event.target.value.toLowerCase().endsWith('.jpeg');\r\n        let svg = event.target.value.toLowerCase().endsWith('.svg');\r\n        if (png || jpg || jpeg || svg) {\r\n            const file = document.getElementById('upload-photo').files[0];\r\n            if (file) {\r\n                const src = URL.createObjectURL(file);\r\n                let img = document.getElementById(\"avatar\");\r\n                setImage(src);\r\n                setAccount({ ...account, fileImg: file })\r\n            }\r\n\r\n        }\r\n        else {\r\n            swal('Pls choose a file with valid extension', '', 'warning');\r\n            event.target.value = '';\r\n        }\r\n    }\r\n\r\n    function handleUploadImage() {\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        ValidatorForm.addValidationRule('isValidPassword', (value) => {\r\n            const regex = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)[a-zA-Z\\\\d]{8,}$\");\r\n            if (regex.test(value)) {\r\n                setFormValid(true)\r\n                return true;\r\n            }\r\n            setFormValid(false);\r\n            return false;\r\n        })\r\n        ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\r\n            if (value.toString() === document.getElementsByName('password')[1].value) {\r\n                setFormValid(true);\r\n                return true;\r\n            }\r\n            setFormValid(false);\r\n            return false;\r\n        })\r\n        ValidatorForm.addValidationRule('isValidUsername', (value) => {\r\n            if (value.toString().length >= 8 && value.toString().length <= 12) {\r\n                setFormValid(true);\r\n                return true;\r\n            }\r\n            setFormValid(false);\r\n            return false;\r\n        })\r\n        ValidatorForm.addValidationRule('isEmail', (value) => {\r\n            const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n            if (re.test(value)) {\r\n                setInfoValid(true);\r\n                return true;\r\n            }\r\n            setInfoValid(false);\r\n            return false;\r\n        })\r\n        ValidatorForm.addValidationRule('isPhoneNumber', (value) => {\r\n            const regex = new RegExp(\"(84|0[3|5|7|8|9])+([0-9]{8})\\\\b\");\r\n            if (regex.test(value)) {\r\n                setInfoValid(true);\r\n                return true;\r\n            }\r\n            setInfoValid(false);\r\n            return false;\r\n        })\r\n        ValidatorForm.addValidationRule('require', (value) => {\r\n            const regex = /^(?!\\s*$).+/;\r\n            if (regex.test(value)) {\r\n                setInfoValid(true);\r\n                return true;\r\n            }\r\n            setInfoValid(false);\r\n            return false;\r\n        })\r\n\r\n        return () => {\r\n            ValidatorForm.removeValidationRule('isValidPassword');\r\n            ValidatorForm.removeValidationRule('isPasswordMatch');\r\n            ValidatorForm.removeValidationRule('isValidUsername');\r\n            ValidatorForm.removeValidationRule('isEmail');\r\n            ValidatorForm.removeValidationRule('isPhoneNumber');\r\n            ValidatorForm.removeValidationRule('require');\r\n        }\r\n    }, [])\r\n\r\n    console.log(Object.values(info).every(i => i !== ''));\r\n\r\n    return (\r\n        <Dialog\r\n            style={{ zIndex: 1000 }}\r\n            open={isDialogShow}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-slide-title\"\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n            <ValidatorForm onSubmit={handleSubmit} className={classes.form}>\r\n                <DialogTitle id=\"alert-dialog-slide-title\">\r\n                    REGISTER\r\n\r\n                    <Stepper activeStep={activeStep} alternativeLabel>\r\n                        {steps.map((label, index) => {\r\n                            const stepProps = {};\r\n                            const labelProps = {};\r\n                            if (isStepSkipped(index)) {\r\n                                stepProps.completed = false;\r\n                            }\r\n                            return (\r\n                                <Step key={label} {...stepProps}>\r\n                                    <StepLabel {...labelProps}>{label}</StepLabel>\r\n                                </Step>\r\n                            );\r\n                        })}\r\n                    </Stepper>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description\">\r\n                        <Grid style={{ width: 580 }} container spacing={4}>\r\n                            {activeStep === 0 ? (\r\n                                <>\r\n                                    <Grid item xs={5}>\r\n                                        <img src={image || process.env.PUBLIC_URL + '/images/gui6.svg'}\r\n                                            width=\"80%\" height={140} id=\"avatar\"\r\n                                            style={{ border: '2px solid black', marginTop: 25 }} />\r\n                                        <label>\r\n                                            <input id=\"upload-photo\" type=\"file\"\r\n                                                name=\"avatar\" style={{ display: 'none' }}\r\n                                                onChange={handleFileChange} />\r\n                                            <PhotoCameraIcon color=\"primary\"\r\n                                                style={{\r\n                                                    position: 'absolute', top: 320, left: 30, cursor: 'pointer',\r\n                                                    background: 'white', border: '2px solid black',\r\n                                                    borderRadius: 30, padding: 5\r\n                                                }}\r\n                                                onClick={handleUploadImage} />\r\n                                        </label>\r\n                                    </Grid>\r\n                                    <Grid item xs={7} container>\r\n                                        <Grid item xs={12} style={{ marginTop: 5 }}>\r\n                                            <TextValidator name=\"username\" label=\"Username *\"\r\n                                                validators={['required', 'isValidUsername']}\r\n                                                errorMessages={['this field is required', 'invalid username']}\r\n                                                value={account.username} onChange={handleChangeAccount} />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} style={{ marginTop: 5 }}>\r\n                                            <TextValidator name=\"password\" label=\"Password *\"\r\n                                                validators={['required', 'isValidPassword']} type=\"password\"\r\n                                                errorMessages={['this field is required', 'invalid password']}\r\n                                                value={account.password} onChange={handleChangeAccount} />\r\n                                        </Grid>\r\n                                        <Grid item xs={12} style={{ marginTop: 5 }}>\r\n                                            <TextValidator name=\"confirmPassword\" label=\"Confirm Password *\"\r\n                                                validators={['required', 'isPasswordMatch']}\r\n                                                type=\"password\"\r\n                                                errorMessages={['this field is required', 'password not match']}\r\n                                                value={account.confirmPassword} onChange={handleChangeAccount} />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </>\r\n                            ) : (activeStep === 1 ? (\r\n                                <>\r\n                                    <Grid item xs={6} style={{ marginTop: 5 }}>\r\n                                        <TextValidator name=\"fullName\" label=\"Full name *\"\r\n                                            validators={['require']}\r\n                                            errorMessages={['this field is required']}\r\n                                            value={info.fullName} onChange={handleChange} />\r\n                                    </Grid>\r\n                                    <Grid item xs={6} style={{ marginTop: 5 }}>\r\n                                        <TextValidator name=\"gender\" label=\"Gender *\"\r\n                                            validators={['required']}\r\n                                            errorMessages={['this field is required']}\r\n                                            value={info.gender} onChange={handleChange} />\r\n                                    </Grid>\r\n                                    <Grid item xs={6} style={{ marginTop: 5 }}>\r\n                                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                            <KeyboardDatePicker style={{ width: 200 }}\r\n                                                label=\"Birthday *\" format=\"dd-MM-yyyy\"\r\n                                                onChange={(date) => setSelectedDOB(date)}\r\n                                                name=\"dateOfBirth\" value={selectedDOB} />\r\n                                        </MuiPickersUtilsProvider>\r\n                                    </Grid>\r\n                                    <Grid item xs={6} style={{ marginTop: 5 }}>\r\n                                        <TextValidator name=\"phone\" label=\"Phone *\"\r\n                                            validators={['required', 'isPhoneNumber']}\r\n                                            errorMessages={['this field is required', 'invalid phone number']}\r\n                                            value={info.phone} onChange={handleChange} />\r\n                                    </Grid>\r\n                                    <Grid item xs={6} style={{ marginTop: 5 }}>\r\n                                        <TextValidator name=\"email\" label=\"Email *\"\r\n                                            validators={['required', 'isEmail']}\r\n                                            errorMessages={['this field is required', 'invalid email']}\r\n                                            value={info.email} onChange={handleChange} />\r\n                                    </Grid>\r\n                                    <Grid item xs={6} style={{ marginTop: 5 }}>\r\n                                        <TextValidator name=\"address\" label=\"Address *\"\r\n                                            validators={['required']}\r\n                                            errorMessages={['this field is required']}\r\n                                            value={info.address} onChange={handleChange} />\r\n                                    </Grid>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <Grid item xs={6}>\r\n                                        <img src={process.env.PUBLIC_URL + '/images/gui7.svg'} width=\"100%\" />\r\n                                    </Grid>\r\n                                </>\r\n                            ))}\r\n                            {/*<Grid item xs={6} style={{ marginTop: 5 }}>\r\n                                <TextValidator name=\"username\" label=\"Username *\"\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                    value={info.username} onChange={handleChange} />\r\n                            </Grid>\r\n                            <Grid item xs={6} style={{ marginTop: 5 }}>\r\n                                <TextValidator name=\"password\" label=\"Password *\"\r\n                                    validators={['required']} type=\"password\"\r\n                                    errorMessages={['this field is required']}\r\n                                    value={info.password} onChange={handleChange} />\r\n                            </Grid> */}\r\n                        </Grid>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {activeStep === steps.length - 1 ? (\r\n                        <div className={classes.actions}>\r\n                            <Button onClick={handleRegister}>OK</Button>\r\n                        </div>\r\n                    ) : (\r\n                        <div className={classes.actions}>\r\n                            <Button disabled={activeStep === 0} onClick={handleBack}>Go back</Button>\r\n\r\n                            {isStepOptional(activeStep) && (\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={handleSkip}\r\n                                    className={classes.button}\r\n                                >\r\n                                    Skip\r\n                                </Button>\r\n                            )}\r\n\r\n                            {activeStep === steps.length - 2 ? (\r\n                                <Button disabled={!Object.values(info).every(i => i !== '') || !isInfoValid}\r\n                                    variant=\"contained\" color=\"primary\" onClick={handleNext}>\r\n                                    Next\r\n                                </Button>\r\n                            ) : (activeStep === steps.length - 3 ? (\r\n                                <Button disabled={account.username === '' || account.password === ''\r\n                                    || account.confirmPassword === '' || !isFormValid}\r\n                                    variant=\"contained\" color=\"primary\" onClick={handleNext}>\r\n                                    Next\r\n                                </Button>\r\n                            ) : (\r\n                                <>\r\n                                </>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </DialogActions>\r\n            </ValidatorForm >\r\n        </Dialog >\r\n    )\r\n}","import { useEffect, useRef, useState } from \"react\"\r\nimport API, { endpoints } from \"../API\";\r\n\r\nexport default function Paypal(props) {\r\n    const paypal = useRef();\r\n    const service = props.service;\r\n    const currentUser = props.currentUser;\r\n    const doctor = props.doctor;\r\n    const shift = props.shift;\r\n    const booking = props.booking;\r\n    const handleSubmit = props.handleSubmit;\r\n\r\n    useEffect(() => {\r\n\r\n        window.paypal.Buttons({\r\n            createOrder: (data, actions, err) => {\r\n                return actions.order.create({\r\n                    intent: 'CAPTURE',\r\n                    purchase_units: [\r\n                        {\r\n                            description: service?.name,\r\n                            amount: {\r\n                                current_code: 'CAD',\r\n                                value: service?.price\r\n                            }\r\n                        }\r\n                    ]\r\n                })\r\n            },\r\n            onApprove: async (data, actions) => {\r\n                const order = await actions.order.capture();\r\n                \r\n                await handleSubmit();\r\n            },\r\n            onError: (err) => {\r\n                console.log(err)\r\n            },\r\n        }).render(paypal.current)\r\n    }, [props.service, props.currentUser])\r\n\r\n    return (\r\n        <div>\r\n            <div ref={paypal}></div>\r\n        </div>\r\n    )\r\n}","import {\r\n    Avatar, Dialog, DialogContent, DialogContentText, DialogTitle,\r\n    Grid, IconButton, makeStyles, TextField, Tooltip, Typography\r\n} from \"@material-ui/core\";\r\nimport { useState } from \"react\"\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {\r\n    getFirestore, collection, addDoc, Timestamp,\r\n    where, query, getDocs, onSnapshot, setDoc, doc, documentId\r\n} from \"firebase/firestore\";\r\n\r\nconst useStyles = makeStyles({\r\n    sender: {\r\n        display: 'inline-block',\r\n        marginLeft: 10,\r\n        marginTop: 16,\r\n        borderRadius: 30,\r\n        background: '#eeeeee',\r\n        width: '50%',\r\n        padding: '8px 8px 8px 15px',\r\n        fontWeight: 'bold'\r\n    },\r\n    receiver: {\r\n        display: 'inline-block',\r\n        marginTop: 16,\r\n        marginLeft: 10,\r\n        borderRadius: 30,\r\n        background: '#3d5afe',\r\n        color: 'white',\r\n        width: '50%',\r\n        padding: '8px 8px 8px 15px',\r\n        marginLeft: 200\r\n    }\r\n})\r\n\r\nexport default function Chat(props) {\r\n    const [isOpen, setOpen] = useState(false);\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n    const classes = useStyles();\r\n    const { uid, displayName, email, photoURL } = props;\r\n\r\n    const handleOpenChat = () => {\r\n        const db = getFirestore();\r\n\r\n        const q = query(collection(db, \"chats\"), where(documentId(), \"==\", uid));\r\n\r\n        onSnapshot(q, (snapShot) => {\r\n            let arr = []\r\n            snapShot.docs.forEach((doc) => {\r\n                const element = {\r\n                    messageId: doc.id,\r\n                    messages: doc.data().messages\r\n                }\r\n                arr.push(element);\r\n            })\r\n            setMessages(arr);\r\n        })\r\n\r\n        setTimeout(() => {\r\n            setOpen(true);\r\n        }, 200)\r\n\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setMessage(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        //check user existed on firebase, if not create new\r\n        const db = getFirestore();\r\n        const q = query(collection(db, 'users'), where(documentId(), \"==\", uid));\r\n        getDocs(q).then(value => {\r\n            if (value.docs.length === 0) {\r\n                const ref = collection(db, 'users');\r\n                const docRef = doc(ref, uid);\r\n                const data = {\r\n                    displayName: displayName,\r\n                    email: email,\r\n                    photoURL: photoURL,\r\n                    uid: uid\r\n                }\r\n                setDoc(docRef, data, { merge: true });\r\n            }\r\n        }).catch(err => console.log(err));\r\n\r\n        let data;\r\n        if (typeof messages !== 'undefined' && messages.length > 0) {\r\n            data = {\r\n                messages: [\r\n                    ...messages[0].messages,\r\n                    {\r\n                        content: message,\r\n                        uid: uid || '',\r\n                        time: Timestamp.now()\r\n                    }\r\n                ]\r\n            }\r\n        } else {\r\n            data = {\r\n                messages: [\r\n                    {\r\n                        content: message,\r\n                        uid: uid || '',\r\n                        time: Timestamp.now()\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n\r\n        const ref = collection(db, 'chats');\r\n        const docRef = doc(ref, uid);\r\n        setDoc(docRef, data, { merge: true })\r\n            .then(res => setMessage('')).catch(err => console.log(err));\r\n\r\n        e.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ position: 'fixed', bottom: 70, right: 7, cursor: 'pointer', width: 70 }}\r\n                onClick={handleOpenChat}>\r\n                <img width=\"100%\" src='https://res.cloudinary.com/dk5jgf3xj/image/upload/v1633499175/doank18/logo/chat-removebg-preview_xbkxge.png'\r\n                    alt=\"Chat\" />\r\n            </div>\r\n\r\n            <Dialog\r\n                open={isOpen}\r\n                onClose={() => setOpen(false)}\r\n            >\r\n                <DialogTitle>\r\n                    <Typography>Chat with hospital</Typography>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <Grid container spacing={4}>\r\n                            <Grid item xs={12}>\r\n                                <div style={{ height: 300, overflow: 'auto' }}>\r\n                                    {messages[0]?.messages && messages[0]?.messages.map(m => {\r\n                                        let time = new Date(1970, 0, 1);\r\n                                        time.setUTCSeconds(m.time?.seconds);\r\n                                        return (\r\n                                            <div>\r\n                                                {m.uid !== uid ? (\r\n                                                    <Tooltip title={time.toString()}>\r\n                                                        <Avatar\r\n                                                            style={{ display: 'inline-block', width: 30, height: 30 }}\r\n                                                            src=\"https://res.cloudinary.com/dk5jgf3xj/image/upload/v1633504071/doank18/logo/logo_lqelbp.png\" />\r\n                                                    </Tooltip>\r\n                                                ) : ''}\r\n                                                <span className={m.uid !== uid ? classes.sender : classes.receiver}\r\n                                                >\r\n                                                    {m.content}\r\n                                                </span>\r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                                <form\r\n                                    style={{ width: 500, marginTop: 20 }}\r\n                                    onSubmit={handleSubmit}>\r\n                                    <TextField placeholder=\"Aa\" style={{ width: '90%' }}\r\n                                        onChange={handleChange} value={message} />\r\n                                    <IconButton disabled={message === \"\"} type=\"submit\">\r\n                                        <SendIcon color={message === \"\" ? '' : 'primary'} />\r\n                                    </IconButton>\r\n                                </form>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}","import {\r\n    AppBar, Avatar, Button, Dialog, DialogActions, DialogContent, DialogContentText,\r\n    DialogTitle, Divider, Grid, IconButton, makeStyles, MenuItem, Paper, Slide, Step, StepLabel, Stepper, Tab,\r\n    Table, TableBody, TableHead, TableCell, TableContainer, TableRow, Tabs, TextField, Toolbar, Tooltip, Typography\r\n} from \"@material-ui/core\";\r\nimport { TextValidator, SelectValidator, ValidatorForm } from \"react-material-ui-form-validator\";\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport ScrollToTop from \"../components/ScrollTopTop\";\r\nimport swal from \"sweetalert\";\r\nimport API, { endpoints } from \"../../src/API\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\nimport DataTable from \"../components/DataTable\";\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport { useHistory } from \"react-router\";\r\nimport { url } from \"../../src/URL\";\r\nimport Login from \"../components/Login\";\r\nimport Register from \"../components/Register\";\r\nimport Paypal from \"../components/Paypal\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { EditAttributes, StayCurrentPortrait } from \"@material-ui/icons\";\r\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport HealingIcon from '@material-ui/icons/Healing';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport TodayIcon from '@material-ui/icons/Today';\r\nimport FingerprintIcon from '@material-ui/icons/Fingerprint';\r\nimport QRCode from 'qrcode.react';\r\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser';\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport HearingIcon from '@material-ui/icons/Hearing';\r\nimport FeedbackIcon from '@material-ui/icons/Feedback';\r\nimport \"firebase/auth\";\r\nimport { getDatabase, set, ref, push, onValue } from \"firebase/database\";\r\nimport { getFirestore, collection, where, query, getDocs, onSnapshot } from \"firebase/firestore\";\r\nimport \"firebase/functions\";\r\nimport \"firebase/storage\";\r\nimport { initializeApp } from \"firebase/app\";\r\nimport firebase from \"firebase/compat/app\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Chat from \"../components/Chat\";\r\nimport AOS from 'aos';\r\nimport \"aos/dist/aos.css\";\r\n\r\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\n\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nlet imgUrl = process.env.PUBLIC_URL + '/images/gui2.jpg';\r\n\r\nexport const CurrentUserContext = React.createContext();\r\n\r\nexport default function LandingPage() {\r\n    const [booking, setBooking] = useState({\r\n        fullName: '',\r\n        gender: '',\r\n        phone: '',\r\n        email: '',\r\n        address: '',\r\n        service: 0\r\n    });\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [selectedDOB, setSelectedDOB] = useState(new Date());\r\n    const [services, setServices] = useState();\r\n    const [open, setOpen] = useState(false);\r\n    const [switchNav, setSwitchNav] = useState('HOME');\r\n    const [isShow, setShow] = useState(false);\r\n    const [accounts, setAccounts] = useState([]);\r\n    const [doctors, setDoctors] = useState([]);\r\n    const [shifts, setShifts] = useState([]);\r\n    const [doctorSelected, setDoctorSelected] = useState();\r\n    const [shiftSelected, setShiftSelected] = useState();\r\n    const [isDialogShow, setDialogShow] = useState(false);\r\n    const [isDoctorShow, setDoctorShow] = useState(false);\r\n    const [isShiftShow, setShiftShow] = useState(false);\r\n    const [infoD, setInfoD] = useState();\r\n    const [infoS, setInfoS] = useState();\r\n    const history = useHistory();\r\n    const [isLoginShow, setLoginShow] = useState(false);\r\n    const [isRegisterShow, setRegisterShow] = useState(false);\r\n    const [currentUser, setCurrentUser] = useState();\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const [skipped, setSkipped] = useState(new Set());\r\n    const steps = ['information', 'payment'];\r\n    const formRef = useRef();\r\n    const [isInfoValid, setInfoValid] = useState(false);\r\n    const [isProfileShow, setProfileShow] = useState(false);\r\n    const [valueTab, setValueTab] = useState(0);\r\n    const [isUpdating, setUpdating] = useState({\r\n        fullName: false,\r\n        gender: false,\r\n        birthday: false,\r\n        phone: false,\r\n        email: false,\r\n        address: false,\r\n        username: false,\r\n        password: false\r\n    });\r\n    const [isVaccineShow, setVaccineShow] = useState(false);\r\n    const [isCovidTestShow, setCovidTestShow] = useState(false);\r\n    const [isHealthRecordsShow, setHealthRecordsShow] = useState(false);\r\n    const [prescriptionsWithVaccine, setPrescriptionsWithVaccine] = useState([]);\r\n    const [prescriptionsWithCovidTest, setPrescriptionsWithCovidTest] = useState([]);\r\n    const [prescriptions, setPrescriptions] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(0);\r\n    const [totalElements, setTotalElements] = useState(0);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [prescriptionDetails, setPrescriptionDetails] = useState([]);\r\n    const [medicines, setMedicines] = useState([]);\r\n    const [isPrescriptionDetailsShow, setPrescriptionDetailsShow] = useState(false);\r\n    const [doctorOfPrescription, setDoctorOfPrescription] = useState();\r\n    const [shiftOfPrescription, setShiftOfPrescription] = useState();\r\n    const [isCovidTestDetailsShow, setCovidTestDetailsShow] = useState(false);\r\n    const [prescriptionWithCovidTest, setPrescriptionWithCovidTest] = useState();\r\n\r\n    const useStyles = makeStyles({\r\n        header: {\r\n            backgroundImage: `url(${imgUrl})`,\r\n            backgroundSize: 'contain',\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundPositionX: 'right',\r\n            height: 750,\r\n        },\r\n        menu_container: {\r\n            display: 'flex',\r\n            justifyContent: 'flex-end',\r\n            listStyleType: 'none',\r\n            fontSize: 16,\r\n            '& a': {\r\n                color: 'black',\r\n                textDecoration: 'none',\r\n                display: 'block'\r\n            },\r\n            '& li': {\r\n                padding: 5,\r\n                minWidth: 100,\r\n                borderRadius: 40,\r\n                textAlign: 'center'\r\n            }\r\n        },\r\n        btnGroup: {\r\n            position: 'absolute',\r\n            top: 320,\r\n            left: 200,\r\n\r\n        },\r\n        btn: {\r\n            margin: 15,\r\n            '& button': {\r\n                borderRadius: 30\r\n            }\r\n        },\r\n        selected: {\r\n            background: '#1976d2',\r\n            '& a': {\r\n                color: 'white'\r\n            }\r\n        },\r\n        content: {\r\n            marginTop: 100,\r\n            padding: 50,\r\n            '& h3, h6': {\r\n                marginTop: 20\r\n            }\r\n        },\r\n        nav: {\r\n            position: 'fixed',\r\n            top: 0,\r\n            background: '#e3f2fd',\r\n            width: '100%',\r\n            zIndex: 10\r\n        },\r\n        avatar: {\r\n            width: '100%',\r\n            minHeight: 100,\r\n            border: '2px solid black'\r\n        },\r\n        editIcon: {\r\n            fill: isInfoValid ? 'green' : 'grey',\r\n            fontSize: 36,\r\n            cursor: isInfoValid ? 'pointer' : 'not-allowed'\r\n        }\r\n    })\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setValueTab(newValue);\r\n    }\r\n\r\n    const isStepOptional = (step) => {\r\n        return step === 1;\r\n    }\r\n\r\n    const isStepSkipped = (step) => {\r\n        return skipped.has(step);\r\n    }\r\n\r\n    const handleNext = () => {\r\n        let newSkipped = skipped;\r\n        if (isStepSkipped(activeStep)) {\r\n            newSkipped = new Set(newSkipped.values());\r\n            newSkipped.delete(activeStep);\r\n        }\r\n\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        setSkipped(newSkipped);\r\n    }\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    }\r\n\r\n    const columnsDoctor = [\r\n        {\r\n            field: 'id',\r\n            hide: true\r\n        },\r\n        {\r\n            field: 'account_id',\r\n            hide: true\r\n        },\r\n        {\r\n            field: 'image',\r\n            headerName: ' ',\r\n            renderCell: (params) => {\r\n                const account_id = params.getValue(params.id, 'account_id');\r\n                const account = accounts.filter(a => a.id === account_id);\r\n                return (\r\n                    <img src={account[0]?.image} width=\"100%\" />\r\n                )\r\n            }\r\n        },\r\n        {\r\n            field: 'firstName',\r\n            hide: true\r\n        },\r\n        {\r\n            field: 'lastName',\r\n            hide: true\r\n        },\r\n        {\r\n            field: 'fullName',\r\n            headerName: 'Full name',\r\n            width: 200,\r\n            valueGetter: (params) => {\r\n                return `${params.getValue(params.id, 'lastName')} ${params.getValue(params.id, 'firstName')}`\r\n            }\r\n        },\r\n        {\r\n            field: 'phone',\r\n            headerName: 'Phone',\r\n            width: 200\r\n        },\r\n        {\r\n            field: 'email',\r\n            headerName: 'Email',\r\n            width: 200\r\n        }\r\n    ]\r\n\r\n    const columnsShift = [\r\n        {\r\n            field: 'id',\r\n            headerName: 'ID',\r\n            width: 200\r\n        },\r\n        {\r\n            field: 'name',\r\n            headerName: 'Shift name',\r\n            width: 250\r\n        },\r\n        {\r\n            field: 'description',\r\n            headerName: 'Shift description',\r\n            width: 500\r\n        },\r\n        {\r\n            field: 'maxBookings',\r\n            headerName: 'Max number of bookings',\r\n            width: 300\r\n        },\r\n        {\r\n            field: 'isMax',\r\n            headerName: 'Is bookings max',\r\n            width: 200\r\n        }\r\n    ]\r\n\r\n    function getServices() {\r\n        API.get(`${endpoints['services']}`)\r\n            .then(res => {\r\n                console.log(res);\r\n                setServices(res.data.content)\r\n            }).catch(err => console.log(err));\r\n    }\r\n\r\n    function handleChange(event) {\r\n        let temp = { ...booking };\r\n        temp[event.target.name] = event.target.value;\r\n        setBooking(temp);\r\n    }\r\n\r\n    function handleClose() {\r\n        setOpen(false);\r\n    }\r\n\r\n    function toggleShow() {\r\n        if (window.pageYOffset > 300)\r\n            setShow(true);\r\n        else\r\n            setShow(false);\r\n    }\r\n\r\n    const scrollToTop = () => {\r\n        window.scrollTo({\r\n            top: 0,\r\n            behavior: 'smooth'\r\n        })\r\n    }\r\n\r\n    const handleChooseDoctor = async () => {\r\n        if (!selectedDate) {\r\n            swal('Please choose a date', '', 'warning');\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n\r\n        if (!shiftSelected) {\r\n            const doctorIds = await API(`${endpoints['schedules']}`, {\r\n                method: 'post',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                },\r\n                data: selectedDate\r\n            }).then(res => {\r\n                if (res.data.content.length == 0) {\r\n                    swal('There are not any doctors available on this date', '', 'warning');\r\n                }\r\n                return [...new Set(res.data.content.map(sh => sh.doctor_id))];\r\n            })\r\n                .catch(err => console.log(err.response));\r\n\r\n            let promise = [];\r\n            let doctorArr = [];\r\n            let accountIds = [];\r\n            for (let i = 0; i < doctorIds?.length; i++) {\r\n                promise.push(\r\n                    API.get(`${endpoints['doctors']}/${doctorIds[i]}`, {\r\n                        headers: {\r\n                            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                        }\r\n                    }).then(res => doctorArr.push(res.data))\r\n                        .catch(err => console.log(err.response))\r\n                )\r\n            }\r\n            Promise.all(promise).then(() => {\r\n                setDoctors(doctorArr);\r\n                accountIds = doctorArr.map(d => d.account_id);\r\n\r\n                let promises = [];\r\n                let accountArr = [];\r\n                for (let i = 0; i < accountIds?.length; i++) {\r\n                    promises.push(\r\n                        API.get(`${endpoints['accounts']}/${accountIds[i]}`, {\r\n                            headers: {\r\n                                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                            }\r\n                        }).then(res => accountArr.push(res.data))\r\n                            .catch(err => console.log(err.response))\r\n                    )\r\n                }\r\n                Promise.all(promises).then(() => {\r\n                    setAccounts(accountArr);\r\n                    setDialogShow(true);\r\n                    setDoctorShow(true);\r\n                });\r\n            });\r\n        } else {\r\n            const doctorIds = await API(`${endpoints['shifts']}/${shiftSelected.id}/schedules`, {\r\n                method: 'post',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                },\r\n                data: selectedDate\r\n            }).then(res => {\r\n                if (res.data.content.length == 0) {\r\n                    swal('There are not any doctors available on this date and this shift', '', 'warning');\r\n                }\r\n                return [...new Set(res.data.content.map(sh => sh.doctor_id))];\r\n            })\r\n                .catch(err => console.log(err.response));\r\n\r\n            let promise = [];\r\n            let doctorArr = [];\r\n            let accountIds = [];\r\n            for (let i = 0; i < doctorIds?.length; i++) {\r\n                promise.push(\r\n                    API.get(`${endpoints['doctors']}/${doctorIds[i]}`, {\r\n                        headers: {\r\n                            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                        }\r\n                    }).then(res => doctorArr.push(res.data))\r\n                        .catch(err => console.log(err.response))\r\n                )\r\n            }\r\n            Promise.all(promise).then(() => {\r\n                setDoctors(doctorArr);\r\n                accountIds = doctorArr.map(d => d.account_id);\r\n\r\n                let promises = [];\r\n                let accountArr = [];\r\n                for (let i = 0; i < accountIds?.length; i++) {\r\n                    promises.push(\r\n                        API.get(`${endpoints['accounts']}/${accountIds[i]}`, {\r\n                            headers: {\r\n                                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                            }\r\n                        }).then(res => accountArr.push(res.data))\r\n                            .catch(err => console.log(err.response))\r\n                    )\r\n                }\r\n                Promise.all(promises).then(() => {\r\n                    setAccounts(accountArr);\r\n                    setDialogShow(true);\r\n                    setDoctorShow(true);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleChooseShift = async () => {\r\n        if (!selectedDate) {\r\n            swal('Please choose a date', '', 'warning');\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n\r\n        if (!doctorSelected) {\r\n            const shiftIds = await API(`${endpoints['schedules']}`, {\r\n                method: 'post',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                },\r\n                data: selectedDate\r\n            }).then(res => {\r\n                if (res.data.content.length == 0) {\r\n                    swal('There are not any shifts available on this date', '', 'warning');\r\n                }\r\n                return [...new Set(res.data.content.map(sh => sh.shift_id))];\r\n            })\r\n                .catch(err => console.log(err.response));\r\n\r\n            let promises = [];\r\n            let shiftArr = [];\r\n            let isMaxArr = [];\r\n            for (let i = 0; i < shiftIds?.length; i++) {\r\n                promises.push(\r\n                    API.get(`${endpoints['shifts']}/${shiftIds[i]}`, {\r\n                        headers: {\r\n                            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                        }\r\n                    }).then(res => shiftArr.push(res.data))\r\n                        .catch(err => console.log(err.response)),\r\n\r\n                    API(`${endpoints['shifts']}/${shiftIds[i]}/bookings/date`, {\r\n                        method: 'post',\r\n                        headers: {\r\n                            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                        },\r\n                        data: selectedDate\r\n                    }).then(res => isMaxArr.push(res.data))\r\n                        .catch(err => console.log(err.response))\r\n                )\r\n            }\r\n            Promise.all(promises).then(() => {\r\n                for (let i = 0; i < shiftArr.length; i++) {\r\n                    Object.assign(shiftArr[i], { isMax: isMaxArr[i] })\r\n                }\r\n                setShifts(shiftArr);\r\n                setDialogShow(true);\r\n                setShiftShow(true);\r\n            })\r\n        } else {\r\n            const shiftIds = await API(`${endpoints['doctors']}/${doctorSelected.id}/schedules`, {\r\n                method: 'post',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                },\r\n                data: selectedDate\r\n            }).then(res => {\r\n                if (res.data.content.length == 0) {\r\n                    swal(`There are not any shifts available on this date and doctor: \r\n                    ${doctorSelected.lastName + ' ' + doctorSelected.firstName}`, '', 'warning');\r\n                }\r\n                return [...new Set(res.data.content.map(sh => sh.shift_id))];\r\n            })\r\n                .catch(err => console.log(err.response));\r\n\r\n            let promises = [];\r\n            let shiftArr = [];\r\n            let isMaxArr = [];\r\n            for (let i = 0; i < shiftIds?.length; i++) {\r\n                promises.push(\r\n                    API.get(`${endpoints['shifts']}/${shiftIds[i]}`, {\r\n                        headers: {\r\n                            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                        }\r\n                    }).then(res => shiftArr.push(res.data))\r\n                        .catch(err => console.log(err.response)),\r\n\r\n                    API(`${endpoints['shifts']}/${shiftIds[i]}/bookings/date`, {\r\n                        method: 'post',\r\n                        headers: {\r\n                            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                        },\r\n                        data: selectedDate\r\n                    }).then(res => isMaxArr.push(res.data))\r\n                        .catch(err => console.log(err.response))\r\n                )\r\n            }\r\n            Promise.all(promises).then(() => {\r\n                for (let i = 0; i < shiftArr.length; i++) {\r\n                    Object.assign(shiftArr[i], { isMax: isMaxArr[i] })\r\n                }\r\n                setShifts(shiftArr);\r\n                setDialogShow(true);\r\n                setShiftShow(true);\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleSelectionChange(id) {\r\n        if (isDoctorShow) {\r\n            API.get(`${endpoints['doctors']}/${id}`, {\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                }\r\n            }).then(res => setDoctorSelected(res.data))\r\n                .catch(err => console.log(err));\r\n        } else if (isShiftShow) {\r\n            API.get(`${endpoints['shifts']}/${id}`, {\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                }\r\n            }).then(res => setShiftSelected(res.data))\r\n                .catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n    function handleSave() {\r\n        if (isDoctorShow) {\r\n            if (!doctorSelected) {\r\n                swal('Please choose a doctor', '', 'warning');\r\n                return;\r\n            }\r\n        } else if (isShiftShow) {\r\n            if (!shiftSelected) {\r\n                swal('Please choose a shift', '', 'warning');\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (doctorSelected || shiftSelected) {\r\n            if (doctorSelected) {\r\n                setInfoD(`Doctor: ${doctorSelected.lastName} ${doctorSelected.firstName}`);\r\n            }\r\n            if (shiftSelected) {\r\n                setInfoS(`Shift: ${shiftSelected.description}`);\r\n            }\r\n        }\r\n\r\n        setDialogShow(false);\r\n        setDoctorShow(false);\r\n        setShiftShow(false);\r\n        setOpen(true);\r\n    }\r\n\r\n    function handleCloseDialog() {\r\n        if (isDoctorShow) {\r\n            setDoctorSelected();\r\n            setDoctorShow(false);\r\n        } else if (isShiftShow) {\r\n            setShiftSelected();\r\n            setShiftShow(false);\r\n        }\r\n\r\n        setDialogShow(false);\r\n        setOpen(true);\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        if (!doctorSelected) {\r\n            swal('Please choose a doctor', '', 'warning');\r\n            return;\r\n        }\r\n        if (!shiftSelected) {\r\n            swal('Please choose a shift', '', 'warning');\r\n            return;\r\n        }\r\n\r\n        let param = \"\";\r\n        if (currentUser)\r\n            param = `?patientId=${currentUser.userId}`\r\n\r\n        API(`${endpoints['doctors']}/${doctorSelected.id}/shifts/${shiftSelected.id}\r\n            /services/${booking.service}/bookings${param}`, {\r\n            method: 'post',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            },\r\n            data: {\r\n                fullName: booking.fullName,\r\n                gender: booking.gender,\r\n                dateOfBirth: selectedDOB,\r\n                phone: booking.phone,\r\n                email: booking.email,\r\n                address: booking.address\r\n            }\r\n        }).then(res => {\r\n            if (res.status === 201) {\r\n                swal('Success', '', 'success');\r\n                setOpen(false);\r\n                setActiveStep(0);\r\n\r\n                //firebase here\r\n                const database = getDatabase();\r\n                const notiListRef = ref(database, 'notifications');\r\n                const newNotiRef = push(notiListRef);\r\n                const now = new Date();\r\n                set(newNotiRef, {\r\n                    content: 'There is a new booking.',\r\n                    time: now.toString()\r\n                });\r\n\r\n                let array = [];\r\n                onValue(notiListRef, (snapshot) => {\r\n                    snapshot.forEach((childSnapshot) => {\r\n                        let childData = childSnapshot.val();\r\n                        array.push({\r\n                            content: childData.content,\r\n                            time: childData.time\r\n                        })\r\n                    })\r\n                })\r\n                console.log(array)\r\n            }\r\n        })\r\n            .catch(err => {\r\n                if (Array.isArray(err.response?.data)) {\r\n                    for (let i = 0; i < err.response.data.length; i++) {\r\n                        swal(err.response.data[i].message, '', 'error');\r\n                    }\r\n                } else if (err.response?.status === 401) {\r\n                    if (window.confirm('Login expired! Please login again.')) {\r\n                        localStorage.clear();\r\n                        history.push(url['login']);\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\r\n    function handleSubmitPaypal() {\r\n        if (!doctorSelected) {\r\n            swal('Please choose a doctor', '', 'warning');\r\n            return;\r\n        }\r\n        if (!shiftSelected) {\r\n            swal('Please choose a shift', '', 'warning');\r\n            return;\r\n        }\r\n\r\n        let param = \"\";\r\n        if (currentUser)\r\n            param = `?patientId=${currentUser.userId}`\r\n\r\n        API(`${endpoints['doctors']}/${doctorSelected.id}/shifts/${shiftSelected.id}\r\n            /services/${booking.service}/bookings${param}`, {\r\n            method: 'post',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            },\r\n            data: {\r\n                fullName: booking.fullName,\r\n                gender: booking.gender,\r\n                dateOfBirth: selectedDOB,\r\n                phone: booking.phone,\r\n                email: booking.email,\r\n                address: booking.address,\r\n                paid: true\r\n            }\r\n        }).then(res => {\r\n            console.log(res);\r\n            if (res.status === 201) {\r\n                swal('Success', '', 'success');\r\n                setOpen(false);\r\n                setActiveStep(0);\r\n            }\r\n        })\r\n            .catch(err => {\r\n                if (Array.isArray(err.response?.data)) {\r\n                    for (let i = 0; i < err.response.data.length; i++) {\r\n                        swal(err.response.data[i].message, '', 'error');\r\n                    }\r\n                } else if (err.response?.status === 401) {\r\n                    if (window.confirm('Login expired! Please login again.')) {\r\n                        localStorage.clear();\r\n                        history.push(url['login']);\r\n                    }\r\n                }\r\n            })\r\n    }\r\n\r\n    function getCurrentUser() {\r\n        API.get(`/auth/user`, {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }\r\n        }).then(res => {\r\n            console.log(res);\r\n            if (res.status === 200) {\r\n                setCurrentUser(res.data);\r\n                setBooking({\r\n                    fullName: res.data.lastName + ' ' + res.data.firstName,\r\n                    gender: res.data.gender,\r\n                    phone: res.data.phone,\r\n                    email: res.data.email,\r\n                    address: res.data.address,\r\n                    service: 0\r\n                })\r\n                setSelectedDOB(new Date(res.data.dob));\r\n                setInfoValid(true);\r\n            }\r\n        }).catch(err => {\r\n            console.log(err.response)\r\n            if (err.response?.status === 403) {\r\n                swal(`Your role was forbidden`, '', 'error');\r\n                localStorage.clear();\r\n                return;\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => setOpen(true), 500)\r\n\r\n        window.addEventListener(\"scroll\", toggleShow);\r\n\r\n        ValidatorForm.addValidationRule('isPhoneNumber', (value) => {\r\n            const regex = new RegExp(\"(84|0[3|5|7|8|9])+([0-9]{8})\\\\b\");\r\n            if (regex.test(value)) {\r\n                setInfoValid(true);\r\n                return true;\r\n            }\r\n            setInfoValid(false);\r\n            return false;\r\n        })\r\n        ValidatorForm.addValidationRule('isServiceChosen', (value) => {\r\n            return value !== 0;\r\n        })\r\n        ValidatorForm.addValidationRule('isEmail', (value) => {\r\n            const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n            if (re.test(value)) {\r\n                setInfoValid(true);\r\n                return true;\r\n            }\r\n            setInfoValid(false);\r\n            return false;\r\n        })\r\n        ValidatorForm.addValidationRule('isGender', (value) => {\r\n            if (value.toLowerCase() === 'male' || value.toLowerCase() === 'female') {\r\n                setInfoValid(true);\r\n                return true;\r\n            }\r\n            setInfoValid(false);\r\n            return false;\r\n        })\r\n        ValidatorForm.addValidationRule('isBlank', (value) => {\r\n            const re = /^\\s*$/;\r\n            if (re.test(value)) {\r\n                setInfoValid(false);\r\n                return false;\r\n            }\r\n            setInfoValid(true);\r\n            return true;\r\n        })\r\n        ValidatorForm.addValidationRule('isValidUsername', (value) => {\r\n            if (value.toString().length >= 8 && value.toString().length <= 12) {\r\n                setInfoValid(true);\r\n                return true;\r\n            }\r\n            setInfoValid(false);\r\n            return false;\r\n        })\r\n        ValidatorForm.addValidationRule('isValidPassword', (value) => {\r\n            const regex = new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)[a-zA-Z\\\\d]{8,}$\");\r\n            if (regex.test(value)) {\r\n                setInfoValid(true)\r\n                return true;\r\n            }\r\n            setInfoValid(false);\r\n            return false;\r\n        })\r\n\r\n        getServices();\r\n        getCurrentUser();\r\n\r\n        const firebaseConfig = {\r\n            apiKey: \"AIzaSyB4eNncvS4xXvEmLQCAfAXgmiJOJnekaQU\",\r\n            authDomain: \"dhbhospital.firebaseapp.com\",\r\n            databaseURL: \"https://dhbhospital-default-rtdb.firebaseio.com\",\r\n            projectId: \"dhbhospital\",\r\n            storageBucket: \"dhbhospital.appspot.com\",\r\n            messagingSenderId: \"894178118006\",\r\n            appId: \"1:894178118006:web:533448f7c6027028881257\",\r\n            measurementId: \"G-SQ482RM39Q\"\r\n        };\r\n\r\n        // Initialize Firebase\r\n        if (!firebase.apps.length) {\r\n            const app = initializeApp(firebaseConfig);\r\n            console.log('Connected');\r\n        }\r\n\r\n        AOS.init({\r\n            duration: 1000\r\n        });\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getCurrentUser();\r\n    }, [localStorage.getItem('token')])\r\n\r\n    function handleLogout() {\r\n        setBooking({\r\n            fullName: '',\r\n            gender: '',\r\n            phone: '',\r\n            email: '',\r\n            address: '',\r\n            service: 0\r\n        });\r\n        setCurrentUser();\r\n        setInfoValid(false);\r\n        localStorage.clear();\r\n    }\r\n\r\n    function vaccineConfirmation() {\r\n        const serviceName = \"Covid vaccination\";\r\n        API.get(`${endpoints['patients']}/${currentUser?.userId}/services/${serviceName}/prescriptions`, {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }\r\n        }).then(res => setPrescriptionsWithVaccine(res.data.content))\r\n            .catch(err => console.log(err))\r\n\r\n        setVaccineShow(true);\r\n    }\r\n\r\n    function covidTests() {\r\n        const serviceName = \"Covid test\";\r\n        API.get(`${endpoints['patients']}/${currentUser?.userId}/services/${serviceName}/prescriptions`, {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }\r\n        }).then(res => setPrescriptionsWithCovidTest(res.data.content))\r\n            .catch(err => console.log(err))\r\n\r\n        setCovidTestShow(true);\r\n    }\r\n\r\n    function getHealthRecords(page = \"?p=1\") {\r\n        API.get(`${endpoints['patients']}/${currentUser?.userId}/prescriptions${page}`, {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }\r\n        }).then(res => {\r\n            setPrescriptions(res.data.content);\r\n            setTotalPages(res.data.totalPages);\r\n            setTotalElements(res.data.totalElements);\r\n            setCurrentPage(res.data.number);\r\n            setHealthRecordsShow(true);\r\n        })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    function handlePageChange(event, newPage) {\r\n        getHealthRecords(`?p=${newPage}`);\r\n        setCurrentPage(newPage - 1);\r\n    }\r\n\r\n    async function getPrescriptionDetails(pres) {\r\n        const doctor = await API.get(`${endpoints['doctors']}/${pres.doctor_id}`, {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }\r\n        }).then(res => setDoctorOfPrescription(res.data))\r\n            .catch(err => console.log(err.response))\r\n\r\n        const medicineIds = await API.get(`${endpoints['prescriptions']}/${pres.id}/prescriptionDetails`, {\r\n            headers: {\r\n                'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n            }\r\n        }).then(res => {\r\n            setPrescriptionDetails(res.data.content);\r\n\r\n            return res.data.content.map(p => p.medicine_id);\r\n        })\r\n            .catch(err => console.log(err.response))\r\n\r\n        let promises = [];\r\n        let medicineArr = [];\r\n        for (let i = 0; i < medicineIds?.length; i++) {\r\n            promises.push(\r\n                API.get(`${endpoints['medicines']}/${medicineIds[i]}`, {\r\n                    headers: {\r\n                        'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                    }\r\n                }).then(res => medicineArr.push(res.data))\r\n                    .catch(err => console.log(err))\r\n            )\r\n        }\r\n        Promise.all(promises).then(() => {\r\n            setMedicines(medicineArr);\r\n        });\r\n    }\r\n\r\n    function isRowSelectable(params) {\r\n        return params.row.isMax !== true;\r\n    }\r\n\r\n    return (\r\n        <CurrentUserContext.Provider\r\n            value={{\r\n                currentUser: currentUser,\r\n                setCurrentUser: setCurrentUser,\r\n                isLoginShow: isLoginShow,\r\n                setLoginShow: setLoginShow,\r\n                isRegisterShow: isRegisterShow,\r\n                setRegisterShow: setRegisterShow\r\n            }}>\r\n            <div className={classes.root}>\r\n                <div className={classes.header}>\r\n                    <nav className={classes.nav}>\r\n                        <div style={{ position: 'absolute', left: 50 }}>\r\n                            <LocalHospitalIcon style={{ fontSize: 64, color: '#1976d2' }} />\r\n                            <Typography variant=\"h6\" noWrap style={{ position: 'absolute', top: 15, left: 70 }}>\r\n                                DHB HOSPITAL\r\n                            </Typography>\r\n                        </div>\r\n                        <ul className={classes.menu_container}>\r\n                            <li className={switchNav === 'HOME' ? classes.selected : ''}>\r\n                                <a onClick={() => setSwitchNav('HOME')} href=\"#\">HOME</a>\r\n                            </li>\r\n                            <li className={switchNav === 'ABOUT' ? classes.selected : ''}>\r\n                                <a onClick={() => setSwitchNav('ABOUT')} href=\"#about\">ABOUT</a>\r\n                            </li>\r\n                            <li className={switchNav === 'SERVICE' ? classes.selected : ''}>\r\n                                <a onClick={() => setSwitchNav('SERVICE')} href=\"#service\">SERVICE</a>\r\n                            </li>\r\n                            <li className={switchNav === 'CONTACT' ? classes.selected : ''}>\r\n                                <a onClick={() => setSwitchNav('CONTACT')} href=\"#\">CONTACT</a>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n\r\n                    {currentUser ? (\r\n                        <div style={{ width: 150, position: 'absolute', top: 150, left: 200 }}>\r\n                            <Avatar alt={currentUser.lastName + ' ' + currentUser.firstName}\r\n                                src={currentUser.image} className={classes.avatar}\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={() => setProfileShow(true)} />\r\n                            <Typography variant=\"h6\" align=\"center\">{currentUser.lastName + ' ' + currentUser.firstName}</Typography>\r\n                        </div>\r\n                    ) : ''}\r\n\r\n                    <div className={classes.btnGroup}>\r\n                        <div className={classes.btn}>\r\n                            <Button style={{ minWidth: 120 }} variant=\"outlined\" color=\"primary\"\r\n                                onClick={() => setRegisterShow(true)}>\r\n                                Register\r\n                            </Button>\r\n                        </div>\r\n                        <div className={classes.btn}>\r\n                            <Button style={{ minWidth: 120 }} variant=\"outlined\" color=\"secondary\"\r\n                                onClick={() => !currentUser ? setLoginShow(true) : handleLogout()}>\r\n                                {currentUser ? 'Logout' : 'Login'}\r\n                            </Button>\r\n                        </div>\r\n                        <div className={classes.btn}>\r\n                            <Button style={{ minWidth: 120 }} variant=\"outlined\" color=\"inherit\"\r\n                                onClick={() => setOpen(true)}>Booking</Button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <Dialog\r\n                        open={open}\r\n                        onClose={handleClose}\r\n                        TransitionComponent={Transition}>\r\n                        <ValidatorForm ref={formRef} onSubmit={handleSubmit}>\r\n                            <DialogTitle>\r\n                                <Stepper activeStep={activeStep} alternativeLabel>\r\n                                    {steps.map((label, index) => {\r\n                                        const stepProps = {};\r\n                                        const labelProps = {};\r\n                                        if (isStepSkipped(index)) {\r\n                                            stepProps.completed = false;\r\n                                        }\r\n                                        return (\r\n                                            <Step key={label} {...stepProps}>\r\n                                                <StepLabel {...labelProps}>{label}</StepLabel>\r\n                                            </Step>\r\n                                        );\r\n                                    })}\r\n                                </Stepper>\r\n                            </DialogTitle>\r\n                            <DialogContent>\r\n                                <DialogContentText>\r\n                                    {activeStep === steps.length - 1 ? (\r\n                                        <Grid style={{ paddingLeft: 20 }} container spacing={4}>\r\n                                            <Grid item xs={12}>\r\n                                                <Typography>Payment online</Typography>\r\n                                                <Paypal\r\n                                                    service={services?.filter(s => s.id === booking.service)[0]}\r\n                                                    handleSubmit={handleSubmitPaypal} />\r\n                                            </Grid>\r\n                                            <Grid item xs={12}>\r\n                                                <Typography>Payment later</Typography>\r\n                                                <Button variant=\"contained\" color=\"primary\"\r\n                                                    style={{ minWidth: 530 }}\r\n                                                    type=\"submit\"   >\r\n                                                    FINISH\r\n                                                </Button>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    ) : (\r\n                                        <Grid container item xs={12} spacing={4} style={{ textAlign: 'center' }}>\r\n                                            <Grid item xs={6}>\r\n                                                <TextValidator className={classes.input} name=\"fullName\" label=\"Full name *\"\r\n                                                    validators={['required', 'isBlank']}\r\n                                                    errorMessages={['this field is required', 'please enter characters']}\r\n                                                    value={booking.fullName}\r\n                                                    onChange={handleChange} />\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <TextValidator name=\"gender\" label=\"Gender *\"\r\n                                                    validators={['required', 'isGender']}\r\n                                                    errorMessages={['this field is required', 'invalid gender']}\r\n                                                    value={booking.gender}\r\n                                                    onChange={handleChange} />\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                                    <KeyboardDatePicker style={{ width: 200 }}\r\n                                                        label=\"DOB *\" format=\"dd-MM-yyyy\"\r\n                                                        onChange={(date) => setSelectedDOB(date)}\r\n                                                        name=\"dateOfBirth\" value={selectedDOB} />\r\n                                                </MuiPickersUtilsProvider>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <TextValidator name=\"phone\" label=\"Phone *\"\r\n                                                    validators={['required', 'isPhoneNumber']}\r\n                                                    errorMessages={['this field is required', 'invalid phone number']}\r\n                                                    value={booking.phone}\r\n                                                    onChange={handleChange} />\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <TextValidator name=\"email\" label=\"Email *\"\r\n                                                    validators={['required', 'isEmail']}\r\n                                                    errorMessages={['this field is required', 'invalid email']}\r\n                                                    value={booking.email}\r\n                                                    onChange={handleChange} />\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <TextValidator name=\"address\" label=\"Address *\"\r\n                                                    validators={['required', 'isBlank']}\r\n                                                    errorMessages={['this field is required', 'please enter characters']}\r\n                                                    value={booking.address}\r\n                                                    onChange={handleChange} />\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                                    <KeyboardDatePicker style={{ width: 200 }}\r\n                                                        label=\"Date *\" format=\"dd-MM-yyyy\"\r\n                                                        minDate={new Date()}\r\n                                                        onChange={(date) => {\r\n                                                            setSelectedDate(date);\r\n                                                            setDoctorSelected();\r\n                                                            setShiftSelected();\r\n                                                        }}\r\n                                                        name=\"date\" value={selectedDate} />\r\n                                                </MuiPickersUtilsProvider>\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <Button\r\n                                                    style={{ minWidth: 195, borderRadius: 25 }}\r\n                                                    variant=\"contained\" color=\"primary\"\r\n                                                    onClick={handleChooseDoctor}>Choose a doctor</Button>\r\n                                                {\r\n                                                    doctorSelected ? (\r\n                                                        <Tooltip arrow title={infoD}>\r\n                                                            <InfoIcon />\r\n                                                        </Tooltip>\r\n                                                    ) : ''\r\n                                                }\r\n                                                <Button\r\n                                                    style={{ marginTop: 10, minWidth: 195, borderRadius: 25 }}\r\n                                                    variant=\"contained\" color=\"secondary\"\r\n                                                    onClick={handleChooseShift}>Choose a shift</Button>\r\n                                                {\r\n                                                    shiftSelected ? (\r\n                                                        <Tooltip arrow title={infoS}>\r\n                                                            <InfoIcon />\r\n                                                        </Tooltip>\r\n                                                    ) : ''\r\n                                                }\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <SelectValidator\r\n                                                    style={{ marginTop: -25, minWidth: 200, textAlign: 'initial' }}\r\n                                                    validators={['isServiceChosen']}\r\n                                                    errorMessages={['this field is required']} value={booking.service}\r\n                                                    onChange={(event) => {\r\n                                                        setBooking({ ...booking, service: event.target.value });\r\n                                                    }}>\r\n                                                    <MenuItem value={0}>Choose service</MenuItem>\r\n                                                    {services && services.map(s => <MenuItem value={s.id}>{s.name}</MenuItem>)}\r\n                                                </SelectValidator>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    )}\r\n                                    <Button\r\n                                        style={{ marginTop: 40, marginLeft: 20 }}\r\n                                        variant=\"outlined\" color=\"secondary\"\r\n                                        onClick={handleBack}\r\n                                        disabled={activeStep === 0}>\r\n                                        Go back\r\n                                    </Button>\r\n                                    <Button\r\n                                        style={{ marginTop: 40, marginLeft: 10 }}\r\n                                        variant=\"outlined\" color=\"primary\"\r\n                                        disabled={activeStep === steps.length - 1 ||\r\n                                            !Object.values(booking).every(i => i !== '') || !isInfoValid\r\n                                            || booking.service === 0 || !doctorSelected || !shiftSelected}\r\n                                        onClick={handleNext}>Next</Button>\r\n                                </DialogContentText>\r\n                            </DialogContent>\r\n                        </ValidatorForm>\r\n                    </Dialog>\r\n\r\n                    <Dialog\r\n                        style={{ zIndex: 1000 }}\r\n                        fullScreen\r\n                        open={isDialogShow}\r\n                        TransitionComponent={Transition}\r\n                        keepMounted\r\n                        onClose={handleClose}\r\n                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                        aria-describedby=\"alert-dialog-slide-description\"\r\n                    >\r\n                        <DialogTitle id=\"alert-dialog-slide-title\">\r\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={handleCloseDialog} aria-label=\"close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            {isDoctorShow ? 'Choose a doctor' : 'Choose a shift'}\r\n                            <IconButton style={{ position: 'absolute', right: 15 }} onClick={handleSave} aria-label=\"save\">\r\n                                <SaveAltIcon />\r\n                            </IconButton>\r\n                        </DialogTitle>\r\n                        <DialogContent>\r\n                            <DialogContentText id=\"alert-dialog-slide-description\">\r\n                                <Grid container spacing={4}>\r\n                                    <Grid item xs={12} style={{ marginTop: 10 }}>\r\n                                        {isDoctorShow ? (\r\n                                            <DataTable rows={doctors} columns={columnsDoctor}\r\n                                                btnTitle=\"\" createURL=\"\" header=\"\"\r\n                                                handleSelectionChange={handleSelectionChange} />\r\n                                        ) : (isShiftShow ? (\r\n                                            <DataTable rows={shifts} columns={columnsShift}\r\n                                                btnTitle=\"\" createURL=\"\" header=\"\"\r\n                                                handleSelectionChange={handleSelectionChange}\r\n                                                isRowSelectable={isRowSelectable} />\r\n                                        ) : '')}\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                    </Dialog>\r\n\r\n                    <Login isDialogShow={isLoginShow} handleClose={() => setLoginShow(false)} />\r\n\r\n                    <Register isDialogShow={isRegisterShow} handleClose={() => setRegisterShow(false)} />\r\n\r\n                </div>\r\n                <div id=\"about\" data-aos=\"flip-right\" className={classes.content}>\r\n                    <Grid container spacing={8}>\r\n                        <Grid item xs={5}>\r\n                            <Typography variant=\"h3\">ABOUT</Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n                                Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,\r\n                                when an unknown printer took a galley of type and scrambled it to make a type\r\n                                specimen book. It has survived not only five centuries, but also the leap into\r\n                                electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s\r\n                                with the release of Letraset sheets containing Lorem Ipsum passages, and more recently\r\n                                with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <img style={{ marginLeft: 110 }} src={process.env.PUBLIC_URL + '/images/gui4.svg'} width=\"100%\" />\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                <div id=\"service\" data-aos=\"flip-left\" className={classes.content}>\r\n                    <Grid container spacing={8}>\r\n                        <Grid item xs={6}>\r\n                            <img src={process.env.PUBLIC_URL + '/images/gui5.svg'} width=\"100%\" />\r\n                        </Grid>\r\n                        <Grid item xs={5}>\r\n                            <Typography variant=\"h3\">SERVICE</Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n                                Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,\r\n                                when an unknown printer took a galley of type and scrambled it to make a type\r\n                                specimen book. It has survived not only five centuries, but also the leap into\r\n                                electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s\r\n                                with the release of Letraset sheets containing Lorem Ipsum passages, and more recently\r\n                                with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                {currentUser ? <Chat uid={currentUser.userId} displayName={currentUser.firstName}\r\n                email={currentUser.email} photoURL={currentUser.image} /> : ''}\r\n                {isShow ? <ScrollToTop handleScrollToTop={scrollToTop} /> : ''}\r\n                <Dialog\r\n                    fullScreen\r\n                    open={isProfileShow}>\r\n                    <DialogTitle>\r\n                        <IconButton edge=\"start\" color=\"inherit\"\r\n                            onClick={() => setProfileShow(false)} aria-label=\"close\">\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            <Grid container spacing={4}>\r\n                                <Grid container spacing={4} item xs={4}>\r\n                                    <Grid item xs={12}>\r\n                                        <Avatar style={{ width: 150, height: 150, margin: '0 auto' }} src={currentUser?.image} />\r\n                                        <Typography style={{ textAlign: 'center', fontWeight: 'bold', marginTop: 20 }}>\r\n                                            {currentUser?.lastName + ' ' + currentUser?.firstName}\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Tabs\r\n                                            style={{ marginLeft: 85 }}\r\n                                            orientation=\"vertical\"\r\n                                            indicatorColor=\"primary\"\r\n                                            textColor=\"primary\"\r\n                                            value={valueTab}\r\n                                            onChange={handleTabChange}>\r\n                                            <Tab label=\"Profile\" />\r\n                                            <Tab label=\"Health records\" />\r\n                                        </Tabs>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    {valueTab === 0 ? (\r\n                                        <TableContainer component={Paper}>\r\n                                            <Table>\r\n                                                <TableBody>\r\n                                                    <TableRow>\r\n                                                        <TableCell>Full name</TableCell>\r\n                                                        <TableCell>\r\n                                                            {isUpdating.fullName ? (\r\n                                                                <>\r\n                                                                    <ValidatorForm>\r\n                                                                        <TextValidator name=\"fullName\"\r\n                                                                            validators={['isBlank']}\r\n                                                                            errorMessages={['this field is required']}\r\n                                                                            value={currentUser?.lastName + ' ' + currentUser?.firstName}\r\n                                                                            onChange={(e) => {\r\n                                                                                const fullName = e.target.value;\r\n                                                                                const firstName = fullName.split(' ').slice(-1).join(' ');\r\n                                                                                const lastName = fullName.split(' ').slice(0, -1).join(' ');\r\n                                                                                setCurrentUser({ ...currentUser, lastName: lastName, firstName: firstName })\r\n                                                                            }} />\r\n                                                                        <EditAttributes id=\"fullName\"\r\n                                                                            className={classes.editIcon}\r\n                                                                            onClick={() => {\r\n                                                                                if (isInfoValid) {\r\n                                                                                    API(`${endpoints['accounts']}/${currentUser?.accountId}\r\n                                                                                    /patients/${currentUser?.userId}`, {\r\n                                                                                        method: 'PATCH',\r\n                                                                                        headers: {\r\n                                                                                            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                                                                                        },\r\n                                                                                        data: {\r\n                                                                                            firstName: currentUser?.firstName,\r\n                                                                                            lastName: currentUser?.lastName\r\n                                                                                        }\r\n                                                                                    }).then(res => {\r\n                                                                                        if (res.status === 200) {\r\n                                                                                            setUpdating({ ...isUpdating, fullName: false })\r\n                                                                                        }\r\n                                                                                    })\r\n                                                                                        .catch(err => console.log(err.response))\r\n                                                                                }\r\n                                                                            }} />\r\n                                                                    </ValidatorForm>\r\n                                                                </>\r\n                                                            )\r\n                                                                : (currentUser?.lastName + ' ' + currentUser?.firstName)}\r\n                                                        </TableCell>\r\n                                                        <TableCell>\r\n                                                            <EditIcon\r\n                                                                color=\"primary\"\r\n                                                                style={{ cursor: 'pointer' }}\r\n                                                                onClick={(e) => {\r\n                                                                    setUpdating({ ...isUpdating, fullName: true });\r\n                                                                }}\r\n                                                            />\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                    <TableRow>\r\n                                                        <TableCell>Gender</TableCell>\r\n                                                        <TableCell>\r\n                                                            {isUpdating.gender ? (\r\n                                                                <>\r\n                                                                    <ValidatorForm>\r\n                                                                        <TextValidator\r\n                                                                            value={currentUser?.gender}\r\n                                                                            validators={['isGender']}\r\n                                                                            errorMessages={['invalid gender']}\r\n                                                                            onChange={(e) => {\r\n                                                                                setCurrentUser({ ...currentUser, gender: e.target.value })\r\n                                                                            }} />\r\n                                                                        <EditAttributes\r\n                                                                            className={classes.editIcon}\r\n                                                                            onClick={() => {\r\n                                                                                if (isInfoValid) {\r\n                                                                                    API(`${endpoints['accounts']}/${currentUser?.accountId}\r\n                                                                                    /patients/${currentUser?.userId}`, {\r\n                                                                                        method: 'PATCH',\r\n                                                                                        headers: {\r\n                                                                                            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                                                                                        },\r\n                                                                                        data: { gender: currentUser?.gender }\r\n                                                                                    }).then(res => {\r\n                                                                                        if (res.status === 200) {\r\n                                                                                            setUpdating({ ...isUpdating, gender: false })\r\n                                                                                        }\r\n                                                                                    })\r\n                                                                                        .catch(err => console.log(err.response))\r\n                                                                                }\r\n                                                                            }} />\r\n                                                                    </ValidatorForm>\r\n                                                                </>\r\n                                                            ) : currentUser?.gender}\r\n                                                        </TableCell>\r\n                                                        <TableCell>\r\n                                                            <EditIcon\r\n                                                                color=\"primary\"\r\n                                                                style={{ cursor: 'pointer' }}\r\n                                                                onClick={(e) => {\r\n                                                                    setUpdating({ ...isUpdating, gender: true });\r\n                                                                }}\r\n                                                            />\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                    <TableRow>\r\n                                                        <TableCell>Birthday</TableCell>\r\n                                                        <TableCell>\r\n                                                            {isUpdating.birthday ? (\r\n                                                                <>\r\n                                                                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                                                                        <KeyboardDatePicker style={{ width: 200 }}\r\n                                                                            format=\"dd/MM/yyyy\"\r\n                                                                            onChange={(date) => setCurrentUser({ ...currentUser, dob: date })}\r\n                                                                            name=\"dateOfBirth\" value={new Date(currentUser?.dob)} />\r\n                                                                    </MuiPickersUtilsProvider>\r\n\r\n                                                                    <EditAttributes\r\n                                                                        style={{ fill: 'green', fontSize: 36, cursor: 'pointer' }}\r\n                                                                        onClick={() => {\r\n                                                                            API(`${endpoints['accounts']}/${currentUser?.accountId}\r\n                                                                            /patients/${currentUser?.userId}`, {\r\n                                                                                method: 'put',\r\n                                                                                headers: {\r\n                                                                                    'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                                                                                },\r\n                                                                                data: {\r\n                                                                                    firstName: currentUser?.firstName,\r\n                                                                                    lastName: currentUser?.lastName,\r\n                                                                                    gender: currentUser?.gender,\r\n                                                                                    phone: currentUser?.phone,\r\n                                                                                    email: currentUser?.email,\r\n                                                                                    address: currentUser?.address,\r\n                                                                                    dateOfBirth: new Date(currentUser.dob)\r\n                                                                                }\r\n                                                                            }).then(res => console.log(res))\r\n                                                                                .catch(err => console.log(err.response))\r\n                                                                            setUpdating({ ...isUpdating, birthday: false })\r\n                                                                        }} />\r\n                                                                </>\r\n                                                            ) : `${new Date(currentUser?.dob).getDate()}/${new Date(currentUser?.dob).getMonth() + 1}/${new Date(currentUser?.dob).getFullYear()}`}\r\n                                                        </TableCell>\r\n                                                        <TableCell>\r\n                                                            <EditIcon\r\n                                                                color=\"primary\"\r\n                                                                style={{ cursor: 'pointer' }}\r\n                                                                onClick={(e) => {\r\n                                                                    setUpdating({ ...isUpdating, birthday: true });\r\n                                                                }}\r\n                                                            />\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                    <TableRow>\r\n                                                        <TableCell>Phone</TableCell>\r\n                                                        <TableCell>\r\n                                                            {isUpdating.phone ? (\r\n                                                                <>\r\n                                                                    <ValidatorForm>\r\n                                                                        <TextValidator value={currentUser?.phone}\r\n                                                                            validators={['isPhoneNumber']}\r\n                                                                            errorMessages={['invalid phone number']}\r\n                                                                            onChange={(e) => {\r\n                                                                                setCurrentUser({ ...currentUser, phone: e.target.value })\r\n                                                                            }} />\r\n                                                                        <EditAttributes\r\n                                                                            className={classes.editIcon}\r\n                                                                            onClick={() => {\r\n                                                                                if (isInfoValid) {\r\n                                                                                    API(`${endpoints['accounts']}/${currentUser?.accountId}\r\n                                                                            /patients/${currentUser?.userId}`, {\r\n                                                                                        method: 'patch',\r\n                                                                                        headers: {\r\n                                                                                            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                                                                                        },\r\n                                                                                        data: { phone: currentUser?.phone }\r\n                                                                                    }).then(res => {\r\n                                                                                        if (res.status === 200) {\r\n                                                                                            setUpdating({ ...isUpdating, phone: false })\r\n                                                                                        }\r\n                                                                                    })\r\n                                                                                        .catch(err => console.log(err.response))\r\n                                                                                }\r\n                                                                            }} />\r\n                                                                    </ValidatorForm>\r\n                                                                </>\r\n                                                            ) : currentUser?.phone}</TableCell>\r\n                                                        <TableCell>\r\n                                                            <EditIcon\r\n                                                                color=\"primary\"\r\n                                                                style={{ cursor: 'pointer' }}\r\n                                                                onClick={(e) => {\r\n                                                                    setUpdating({ ...isUpdating, phone: true });\r\n                                                                }}\r\n                                                            />\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                    <TableRow>\r\n                                                        <TableCell>Email</TableCell>\r\n                                                        <TableCell>\r\n                                                            {isUpdating.email ? (\r\n                                                                <>\r\n                                                                    <ValidatorForm>\r\n                                                                        <TextValidator\r\n                                                                            value={currentUser?.email}\r\n                                                                            validators={['isEmail']}\r\n                                                                            errorMessages={['invalid email']}\r\n                                                                            onChange={(e) => setCurrentUser({ ...currentUser, email: e.target.value })} />\r\n                                                                        <EditAttributes\r\n                                                                            className={classes.editIcon}\r\n                                                                            onClick={() => {\r\n                                                                                if (isInfoValid) {\r\n                                                                                    API(`${endpoints['accounts']}/${currentUser?.accountId}\r\n                                                                                /patients/${currentUser?.userId}`, {\r\n                                                                                        method: 'patch',\r\n                                                                                        headers: {\r\n                                                                                            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                                                                                        },\r\n                                                                                        data: { email: currentUser?.email }\r\n                                                                                    }).then(res => {\r\n                                                                                        if (res.status === 200) {\r\n                                                                                            setUpdating({ ...isUpdating, email: false })\r\n                                                                                        }\r\n                                                                                    })\r\n                                                                                        .catch(err => console.log(err.response))\r\n                                                                                }\r\n                                                                            }} />\r\n                                                                    </ValidatorForm>\r\n                                                                </>\r\n                                                            ) : currentUser?.email}</TableCell>\r\n                                                        <TableCell>\r\n                                                            <EditIcon\r\n                                                                color=\"primary\"\r\n                                                                style={{ cursor: 'pointer' }}\r\n                                                                onClick={(e) => {\r\n                                                                    setUpdating({ ...isUpdating, email: true });\r\n                                                                }}\r\n                                                            />\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                    <TableRow>\r\n                                                        <TableCell>Address</TableCell>\r\n                                                        <TableCell>\r\n                                                            {isUpdating.address ? (\r\n                                                                <>\r\n                                                                    <ValidatorForm>\r\n                                                                        <TextValidator\r\n                                                                            value={currentUser?.address}\r\n                                                                            validators={['isBlank']}\r\n                                                                            errorMessages={'this field is required'}\r\n                                                                            onChange={(e) => setCurrentUser({ ...currentUser, address: e.target.value })} />\r\n                                                                        <EditAttributes\r\n                                                                            className={classes.editIcon}\r\n                                                                            onClick={() => {\r\n                                                                                if (isInfoValid) {\r\n                                                                                    API(`${endpoints['accounts']}/${currentUser?.accountId}\r\n                                                                                    /patients/${currentUser?.userId}`, {\r\n                                                                                        method: 'patch',\r\n                                                                                        headers: {\r\n                                                                                            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                                                                                        },\r\n                                                                                        data: { address: currentUser?.address }\r\n                                                                                    }).then(res => {\r\n                                                                                        if (res.status === 200) {\r\n                                                                                            setUpdating({ ...isUpdating, address: false })\r\n                                                                                        }\r\n                                                                                    }).catch(err => console.log(err.response))\r\n                                                                                }\r\n                                                                            }} />\r\n                                                                    </ValidatorForm>\r\n                                                                </>\r\n                                                            ) : currentUser?.address}</TableCell>\r\n                                                        <TableCell>\r\n                                                            <EditIcon\r\n                                                                color=\"primary\"\r\n                                                                style={{ cursor: 'pointer' }}\r\n                                                                onClick={() => {\r\n                                                                    setUpdating({ ...isUpdating, address: true });\r\n                                                                }}\r\n                                                            />\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                    <TableRow>\r\n                                                        <TableCell>Username</TableCell>\r\n                                                        <TableCell>\r\n                                                            {isUpdating.username ? (\r\n                                                                <>\r\n                                                                    <ValidatorForm>\r\n                                                                        <TextValidator value={currentUser?.username}\r\n                                                                            validators={['isValidUsername']}\r\n                                                                            errorMessages={['invalid username']}\r\n                                                                            onChange={(e) => setCurrentUser({ ...currentUser, username: e.target.value })} />\r\n                                                                        <EditAttributes\r\n                                                                            className={classes.editIcon}\r\n                                                                            onClick={() => {\r\n                                                                                if (isInfoValid) {\r\n                                                                                    API(`${endpoints['accounts']}/${currentUser?.accountId}`, {\r\n                                                                                        method: 'patch',\r\n                                                                                        headers: {\r\n                                                                                            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                                                                                        },\r\n                                                                                        data: { username: currentUser?.username }\r\n                                                                                    }).then(res => {\r\n                                                                                        if (res.status === 200) {\r\n                                                                                            setUpdating({ ...isUpdating, username: false })\r\n                                                                                        }\r\n                                                                                    }).catch(err => console.log(err.response))\r\n                                                                                }\r\n                                                                            }} />\r\n                                                                    </ValidatorForm>\r\n                                                                </>\r\n                                                            ) : currentUser?.username}</TableCell>\r\n                                                        <TableCell>\r\n                                                            <EditIcon\r\n                                                                color=\"primary\"\r\n                                                                style={{ cursor: 'pointer' }}\r\n                                                                onClick={(e) => {\r\n                                                                    setUpdating({ ...isUpdating, username: true });\r\n                                                                }}\r\n                                                            />\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                    <TableRow>\r\n                                                        <TableCell>Password</TableCell>\r\n                                                        <TableCell>\r\n                                                            {isUpdating.password ? (\r\n                                                                <>\r\n                                                                    <ValidatorForm>\r\n                                                                        <TextValidator type=\"password\"\r\n                                                                            value={currentUser?.password}\r\n                                                                            validators={['isValidPassword']}\r\n                                                                            errorMessages={['invalid password']}\r\n                                                                            onChange={(e) => setCurrentUser({ ...currentUser, password: e.target.value })} />\r\n                                                                        <EditAttributes\r\n                                                                            className={classes.editIcon}\r\n                                                                            onClick={() => {\r\n                                                                                if (isInfoValid) {\r\n                                                                                    API(`${endpoints['accounts']}/${currentUser?.accountId}`, {\r\n                                                                                        method: 'patch',\r\n                                                                                        headers: {\r\n                                                                                            'Authorization': 'Bearer ' + localStorage.getItem('token')\r\n                                                                                        },\r\n                                                                                        data: { password: currentUser?.password }\r\n                                                                                    }).then(res => {\r\n                                                                                        if (res.status === 200) {\r\n                                                                                            setUpdating({ ...isUpdating, password: false })\r\n                                                                                        }\r\n                                                                                    }).catch(err => console.log(err.response))\r\n                                                                                }\r\n                                                                            }} />\r\n                                                                    </ValidatorForm>\r\n                                                                </>\r\n                                                            ) : currentUser?.password}</TableCell>\r\n                                                        <TableCell>\r\n                                                            <EditIcon\r\n                                                                color=\"primary\"\r\n                                                                style={{ cursor: 'pointer' }}\r\n                                                                onClick={(e) => {\r\n                                                                    setUpdating({ ...isUpdating, password: true });\r\n                                                                }}\r\n                                                            />\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    ) : (valueTab === 1 ? (\r\n                                        <Grid container spacing={8}>\r\n                                            <Grid item xs={12} container>\r\n                                                <Grid style={{ textAlign: 'center' }} item xs={4}>\r\n                                                    <FavoriteIcon color=\"primary\"\r\n                                                        style={{ fontSize: 108, textAlign: 'center', cursor: 'pointer' }}\r\n                                                        onClick={() => getHealthRecords()} />\r\n                                                    <Typography color=\"textPrimary\">Health records</Typography>\r\n                                                </Grid>\r\n                                                <Grid style={{ textAlign: 'center' }} item xs={4}>\r\n                                                    <HealingIcon\r\n                                                        style={{ fontSize: 108, textAlign: 'center', cursor: 'pointer' }}\r\n                                                        color=\"primary\" onClick={vaccineConfirmation} />\r\n                                                    <Typography color=\"textPrimary\">Vaccination confirmation</Typography>\r\n                                                </Grid>\r\n                                                <Grid style={{ textAlign: 'center' }} item xs={4}>\r\n                                                    <LocalHospitalIcon color=\"primary\"\r\n                                                        style={{ fontSize: 108, textAlign: 'center', cursor: 'pointer' }}\r\n                                                        onClick={covidTests} />\r\n                                                    <Typography color=\"textPrimary\">Covid tests</Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <Grid style={{ marginTop: 50 }} item xs={12} container>\r\n                                                <Grid style={{ textAlign: 'center' }} item xs={4}>\r\n                                                    <AssignmentIcon color=\"primary\" style={{ fontSize: 108, textAlign: 'center' }} />\r\n                                                    <Typography>Health declaration</Typography>\r\n                                                </Grid>\r\n                                                <Grid style={{ textAlign: 'center' }} item xs={4}>\r\n                                                    <HearingIcon color=\"primary\" style={{ fontSize: 108, textAlign: 'center' }} />\r\n                                                    <Typography>Symptoms after vaccination</Typography>\r\n                                                </Grid>\r\n                                                <Grid style={{ textAlign: 'center' }} item xs={4}>\r\n                                                    <FeedbackIcon color=\"primary\" style={{ fontSize: 108, textAlign: 'center' }} />\r\n                                                    <Typography>Feedback</Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    ) : '')}\r\n                                </Grid>\r\n                            </Grid>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                </Dialog>\r\n\r\n                <Dialog\r\n                    open={isVaccineShow}\r\n                    onClose={() => setVaccineShow(false)}\r\n                    PaperProps={{\r\n                        style: {\r\n                            background: prescriptionsWithVaccine?.length === 2 ?\r\n                                '##66bb6a' : (prescriptionsWithVaccine?.length === 1 ? '#fdd835'\r\n                                    : '#e53935')\r\n                        }\r\n                    }}\r\n                >\r\n                    <DialogTitle>\r\n                        <Typography style={{ textAlign: 'center' }}\r\n                            color=\"textPrimary\" variant=\"h5\">Covid vaccination confirmation</Typography>\r\n                        <VerifiedUserIcon\r\n                            style={{\r\n                                textAlign: 'center', display: 'block',\r\n                                width: '100%', fontSize: 82, marginTop: 20, marginBottom: 10, fill: 'white'\r\n                            }} />\r\n                        <hr style={{ border: '3px solid black' }} />\r\n                        <Typography style={{ textAlign: 'center', textTransform: \"uppercase\" }} variant=\"h5\">\r\n                            {prescriptionsWithVaccine?.length === 2 ? '2 shots of covid vaccine'\r\n                                : (prescriptionsWithVaccine?.length === 1 ? '1 shot of covid vaccine' : '0 shot of covid vaccine')}\r\n                        </Typography>\r\n                        <hr style={{ border: '3px solid black' }} />\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            <Grid container spacing={4}>\r\n                                <Grid style={{ textAlign: 'center' }} item xs={12}>\r\n                                    <QRCode\r\n                                        id=\"qrcode\"\r\n                                        value={`http://localhost`}\r\n                                        size={100}\r\n                                        level={'H'}\r\n                                        includeMargin\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Typography\r\n                                        variant=\"caption\"\r\n                                        style={{ fontSize: 16, fontWeight: 'bold' }}>Personal information</Typography>\r\n                                    <TableContainer component={Paper}>\r\n                                        <Table>\r\n                                            <TableBody>\r\n                                                <TableRow>\r\n                                                    <TableCell><PersonIcon /></TableCell>\r\n                                                    <TableCell>\r\n                                                        <Typography variant=\"caption\">Full name</Typography>\r\n                                                        <Typography>{currentUser?.lastName + ' ' + currentUser?.firstName}</Typography>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                                <TableRow>\r\n                                                    <TableCell><TodayIcon /></TableCell>\r\n                                                    <TableCell>\r\n                                                        <Typography variant=\"caption\">Date of Birth</Typography>\r\n                                                        <Typography>\r\n                                                            {`${new Date(currentUser?.dob).getDate()}/${new Date(currentUser?.dob).getMonth() + 1}/${new Date(currentUser?.dob).getFullYear()}`}\r\n                                                        </Typography>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                                <TableRow>\r\n                                                    <TableCell><FingerprintIcon /></TableCell>\r\n                                                    <TableCell>\r\n                                                        <Typography variant=\"caption\">Phone</Typography>\r\n                                                        <Typography>{currentUser?.phone}</Typography>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </TableContainer>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                </Dialog>\r\n\r\n                <Dialog\r\n                    open={isCovidTestShow}\r\n                    onClose={() => setCovidTestShow(false)}\r\n                >\r\n                    <DialogTitle>\r\n                        <Typography style={{ textAlign: 'center' }}\r\n                            color=\"textPrimary\" variant=\"h5\">Covid tests</Typography>\r\n                        <VerifiedUserIcon\r\n                            style={{\r\n                                textAlign: 'center', display: 'block',\r\n                                width: '100%', fontSize: 82, marginTop: 20, marginBottom: 10, fill: '#f06292'\r\n                            }} />\r\n                        <hr style={{ border: '3px solid black' }} />\r\n                        <Typography style={{ textAlign: 'center', textTransform: \"uppercase\" }} variant=\"h5\">\r\n                            list of test samples\r\n                        </Typography>\r\n                        <hr style={{ border: '3px solid black' }} />\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            <Grid container spacing={4}>\r\n                                {prescriptionsWithCovidTest && prescriptionsWithCovidTest.map(p => {\r\n                                    return (\r\n                                        <Grid\r\n                                            style={{ textAlign: 'center', cursor: 'pointer' }}\r\n                                            item xs={4}\r\n                                            onClick={() => {\r\n                                                setPrescriptionWithCovidTest(p);\r\n                                                setTimeout(() => {\r\n                                                    setCovidTestDetailsShow(true);\r\n                                                }, 300)\r\n                                            }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    background: '#f06292',\r\n                                                    minWidth: 150, textAlign: 'center', color: 'white',\r\n                                                    textTransform: 'uppercase', paddingTop: 15, paddingBottom: 5,\r\n                                                }}>\r\n                                                {monthNames[new Date(p.date).getMonth()]}\r\n                                            </div>\r\n                                            <div\r\n                                                style={{\r\n                                                    background: '#e8eaf6', minWidth: 150, textAlign: 'center',\r\n                                                    fontSize: 56, fontWeight: 'bold'\r\n                                                }}>\r\n                                                {('0' + new Date(p.date).getDate()).slice(-2)}\r\n                                            </div>\r\n                                        </Grid>\r\n                                    )\r\n                                })}\r\n                            </Grid>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                </Dialog>\r\n\r\n                <Dialog\r\n                    open={isHealthRecordsShow}\r\n                    onClose={() => setHealthRecordsShow(false)}\r\n                >\r\n                    <DialogTitle>\r\n                        <Typography style={{ textAlign: 'center' }}\r\n                            color=\"textPrimary\" variant=\"h5\">Health records</Typography>\r\n                        <FavoriteIcon\r\n                            style={{\r\n                                textAlign: 'center', display: 'block',\r\n                                width: '100%', fontSize: 82, marginTop: 20, marginBottom: 10, fill: '#f06292'\r\n                            }} />\r\n                        <hr style={{ border: '3px solid black' }} />\r\n                        <Typography style={{ textAlign: 'center', textTransform: \"uppercase\" }} variant=\"h5\">\r\n                            List of prescriptions\r\n                        </Typography>\r\n                        <hr style={{ border: '3px solid black' }} />\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            <Grid container spacing={4}>\r\n                                {prescriptions && prescriptions.map(p => {\r\n                                    return (\r\n                                        <Grid\r\n                                            style={{ textAlign: 'center', cursor: 'pointer' }}\r\n                                            item xs={4}\r\n                                            onClick={() => {\r\n                                                getPrescriptionDetails(p);\r\n                                                setTimeout(() => {\r\n                                                    setPrescriptionDetailsShow(true);\r\n                                                }, 300)\r\n                                            }}>\r\n                                            <div\r\n                                                style={{\r\n                                                    background: '#f06292',\r\n                                                    minWidth: 150, textAlign: 'center', color: 'white',\r\n                                                    textTransform: 'uppercase', paddingTop: 15, paddingBottom: 5,\r\n                                                }}>\r\n                                                {monthNames[new Date(p.date).getMonth()]}\r\n                                            </div>\r\n                                            <div\r\n                                                style={{\r\n                                                    background: '#e8eaf6', minWidth: 150, textAlign: 'center',\r\n                                                    fontSize: 56, fontWeight: 'bold'\r\n                                                }}>\r\n                                                {('0' + new Date(p.date).getDate()).slice(-2)}\r\n                                            </div>\r\n                                        </Grid>\r\n                                    )\r\n                                })}\r\n                            </Grid>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions style={{ marginTop: 40 }}>\r\n                        <Pagination page={currentPage + 1} count={totalPages} shape=\"rounded\" variant=\"outlined\"\r\n                            showFirstButton showLastButton\r\n                            onChange={handlePageChange} />\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                <Dialog\r\n                    fullScreen\r\n                    open={isPrescriptionDetailsShow}\r\n                >\r\n                    <DialogTitle>\r\n                        <IconButton edge=\"start\" color=\"inherit\"\r\n                            onClick={() => setPrescriptionDetailsShow(false)} aria-label=\"close\">\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                        <div style={{ textAlign: 'right', marginTop: -40 }}>\r\n                            <LocalHospitalIcon style={{ fontSize: 64, color: '#1976d2' }} />\r\n                            <Typography variant=\"h6\" noWrap>\r\n                                DHB HOSPITAL\r\n                            </Typography>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            {prescriptionDetails ? (\r\n                                <>\r\n                                    <Typography style={{ margin: '40px 0 20px 0' }}>Prescription</Typography>\r\n                                    <TableContainer component={Paper}>\r\n                                        <Table>\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell style={{ fontWeight: 'bold' }}>Patient name</TableCell>\r\n                                                    <TableCell style={{ fontWeight: 'bold' }}>Service name</TableCell>\r\n                                                    <TableCell style={{ fontWeight: 'bold' }}>Service fee</TableCell>\r\n                                                    <TableCell style={{ fontWeight: 'bold' }}>Date</TableCell>\r\n                                                    <TableCell style={{ fontWeight: 'bold' }}>Doctor</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {prescriptionDetails?.map(pd => {\r\n                                                    const prescription = prescriptions.filter(p => p.id === pd.prescription_id)[0];\r\n                                                    return (\r\n                                                        <TableRow>\r\n                                                            <TableCell>{currentUser?.lastName + ' ' + currentUser?.firstName}</TableCell>\r\n                                                            <TableCell>{prescription?.serviceName}</TableCell>\r\n                                                            <TableCell>{prescription?.serviceFee} $</TableCell>\r\n                                                            <TableCell>\r\n                                                                {`${new Date(prescription?.date).getDate()}/${new Date(prescription?.date).getMonth() + 1}/${new Date(prescription?.date).getFullYear()}`}\r\n                                                            </TableCell>\r\n                                                            <TableCell>{doctorOfPrescription?.lastName + ' ' + doctorOfPrescription?.firstName}</TableCell>\r\n                                                        </TableRow>\r\n                                                    )\r\n                                                })}\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </TableContainer>\r\n\r\n                                    <Typography style={{ margin: '40px 0 20px 0' }}>Prescription Details</Typography>\r\n                                    <TableContainer component={Paper}>\r\n                                        <Table arial-label=\"simple table\">\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell style={{ fontWeight: 'bold' }}>No.</TableCell>\r\n                                                    <TableCell style={{ fontWeight: 'bold' }}>Medicine</TableCell>\r\n                                                    <TableCell style={{ fontWeight: 'bold' }}>Description</TableCell>\r\n                                                    <TableCell style={{ fontWeight: 'bold' }}>Quantity</TableCell>\r\n                                                    <TableCell style={{ fontWeight: 'bold' }}>Price</TableCell>\r\n                                                    <TableCell style={{ fontWeight: 'bold' }}>Unit</TableCell>\r\n                                                    <TableCell style={{ fontWeight: 'bold' }}>Total</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {prescriptionDetails.map((p, index) => {\r\n                                                    const medicine = medicines.filter(m => m.id === p.medicine_id)[0];\r\n                                                    return (\r\n                                                        <TableRow key={p.id}>\r\n                                                            <TableCell>{index + 1}</TableCell>\r\n                                                            <TableCell>{medicine?.name}</TableCell>\r\n                                                            <TableCell>{medicine?.description}</TableCell>\r\n                                                            <TableCell>{p.quantity}</TableCell>\r\n                                                            <TableCell>{p.unitPrice}</TableCell>\r\n                                                            <TableCell>{medicine?.unit}</TableCell>\r\n                                                            <TableCell>{p.totalPrice}</TableCell>\r\n                                                        </TableRow>\r\n                                                    )\r\n                                                })}\r\n                                                <TableRow>\r\n                                                    <TableCell colSpan={6}>Total price of medicine</TableCell>\r\n                                                    <TableCell>\r\n                                                        {prescriptionDetails.map(p => p.totalPrice).reduce((a, b) => a + b, 0)} $\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </TableContainer>\r\n                                </>\r\n                            ) : ''}\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                </Dialog>\r\n\r\n                <Dialog\r\n                    fullScreen\r\n                    open={isCovidTestDetailsShow}\r\n                >\r\n                    <DialogTitle>\r\n                        <IconButton edge=\"start\" color=\"inherit\"\r\n                            onClick={() => setCovidTestDetailsShow(false)} aria-label=\"close\">\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                        <div style={{ textAlign: 'right', marginTop: -40 }}>\r\n                            <LocalHospitalIcon style={{ fontSize: 64, color: '#1976d2' }} />\r\n                            <Typography variant=\"h6\" noWrap>\r\n                                DHB HOSPITAL\r\n                            </Typography>\r\n                        </div>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            <TableContainer component={Paper}>\r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell style={{ fontWeight: 'bold' }}>Service name</TableCell>\r\n                                            <TableCell style={{ fontWeight: 'bold' }}>Service fee</TableCell>\r\n                                            <TableCell style={{ fontWeight: 'bold' }}>Date</TableCell>\r\n                                            <TableCell style={{ fontWeight: 'bold' }}>Description</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {prescriptionWithCovidTest ? (\r\n                                            <TableRow>\r\n                                                <TableCell>{prescriptionWithCovidTest.serviceName}</TableCell>\r\n                                                <TableCell>{prescriptionWithCovidTest.serviceFee} $</TableCell>\r\n                                                <TableCell>\r\n                                                    {`${new Date(prescriptionWithCovidTest.date).getDate()}/${new Date(prescriptionWithCovidTest.date).getMonth() + 1}/${new Date(prescriptionWithCovidTest.date).getFullYear()}`}\r\n                                                </TableCell>\r\n                                                <TableCell>{prescriptionWithCovidTest.description}</TableCell>\r\n                                            </TableRow>\r\n                                        ) : ''\r\n                                        }\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </div>\r\n        </CurrentUserContext.Provider>\r\n    )\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport LandingPage from './pages';\n\nfunction App() {\n  return (\n    <LandingPage />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}